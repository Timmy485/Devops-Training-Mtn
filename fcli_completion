#!/usr/bin/env bash
#
# fcli Bash Completion
# =======================
#
# Bash completion support for the `fcli` command,
# generated by [picocli](https://picocli.info/) version 4.7.1.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `fcli [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'fcli (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_fcli finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_fcli() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} license" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util" ];    then _picocli_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action get" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action help" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action import" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action list" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action ls" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action reset" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action run" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} action sign" ];    then _picocli_fcli_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator admin-config" ];    then _picocli_fcli_aviator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator session" ];    then _picocli_fcli_aviator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app" ];    then _picocli_fcli_aviator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator entitlement" ];    then _picocli_fcli_aviator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator ssc" ];    then _picocli_fcli_aviator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token" ];    then _picocli_fcli_aviator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator admin-config list" ];    then _picocli_fcli_aviator_adminconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator admin-config ls" ];    then _picocli_fcli_aviator_adminconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator admin-config create" ];    then _picocli_fcli_aviator_adminconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator admin-config delete" ];    then _picocli_fcli_aviator_adminconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator admin-config rm" ];    then _picocli_fcli_aviator_adminconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator session list" ];    then _picocli_fcli_aviator_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator session ls" ];    then _picocli_fcli_aviator_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator session login" ];    then _picocli_fcli_aviator_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator session logout" ];    then _picocli_fcli_aviator_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app create" ];    then _picocli_fcli_aviator_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app delete" ];    then _picocli_fcli_aviator_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app rm" ];    then _picocli_fcli_aviator_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app get" ];    then _picocli_fcli_aviator_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app list" ];    then _picocli_fcli_aviator_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app ls" ];    then _picocli_fcli_aviator_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator app update" ];    then _picocli_fcli_aviator_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator entitlement list" ];    then _picocli_fcli_aviator_entitlement; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator entitlement ls" ];    then _picocli_fcli_aviator_entitlement; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator ssc audit" ];    then _picocli_fcli_aviator_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token create" ];    then _picocli_fcli_aviator_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token delete" ];    then _picocli_fcli_aviator_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token rm" ];    then _picocli_fcli_aviator_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token list" ];    then _picocli_fcli_aviator_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token ls" ];    then _picocli_fcli_aviator_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token revoke" ];    then _picocli_fcli_aviator_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aviator token validate" ];    then _picocli_fcli_aviator_token; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config clear" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config truststore" ];    then _picocli_fcli_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy add" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy clear" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy delete" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy rm" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy list" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy ls" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config proxy update" ];    then _picocli_fcli_config_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key clear" ];    then _picocli_fcli_config_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key delete" ];    then _picocli_fcli_config_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key rm" ];    then _picocli_fcli_config_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key get" ];    then _picocli_fcli_config_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key list" ];    then _picocli_fcli_config_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key ls" ];    then _picocli_fcli_config_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config public-key import" ];    then _picocli_fcli_config_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey clear" ];    then _picocli_fcli_config_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey delete" ];    then _picocli_fcli_config_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey rm" ];    then _picocli_fcli_config_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey get" ];    then _picocli_fcli_config_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey list" ];    then _picocli_fcli_config_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey ls" ];    then _picocli_fcli_config_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config pubkey import" ];    then _picocli_fcli_config_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config truststore clear" ];    then _picocli_fcli_config_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config truststore get" ];    then _picocli_fcli_config_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config truststore set" ];    then _picocli_fcli_config_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg clear" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg truststore" ];    then _picocli_fcli_cfg; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy add" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy clear" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy delete" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy rm" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy list" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy ls" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg proxy update" ];    then _picocli_fcli_cfg_proxy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key clear" ];    then _picocli_fcli_cfg_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key delete" ];    then _picocli_fcli_cfg_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key rm" ];    then _picocli_fcli_cfg_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key get" ];    then _picocli_fcli_cfg_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key list" ];    then _picocli_fcli_cfg_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key ls" ];    then _picocli_fcli_cfg_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg public-key import" ];    then _picocli_fcli_cfg_publickey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey clear" ];    then _picocli_fcli_cfg_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey delete" ];    then _picocli_fcli_cfg_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey rm" ];    then _picocli_fcli_cfg_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey get" ];    then _picocli_fcli_cfg_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey list" ];    then _picocli_fcli_cfg_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey ls" ];    then _picocli_fcli_cfg_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg pubkey import" ];    then _picocli_fcli_cfg_pubkey; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg truststore clear" ];    then _picocli_fcli_cfg_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg truststore get" ];    then _picocli_fcli_cfg_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cfg truststore set" ];    then _picocli_fcli_cfg_truststore; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod session" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod microservice" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ms" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod issue" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rest" ];    then _picocli_fcli_fod; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod session list" ];    then _picocli_fcli_fod_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod session ls" ];    then _picocli_fcli_fod_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod session login" ];    then _picocli_fcli_fod_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod session logout" ];    then _picocli_fcli_fod_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action get" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action help" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action import" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action list" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action ls" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action reset" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action run" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod action sign" ];    then _picocli_fcli_fod_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control list-roles" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control lsr" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control list-groups" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control lsg" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control get-group" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control create-group" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control update-group" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control delete-group" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control rm-group" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control list-users" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control lsu" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control get-user" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control create-user" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control update-user" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control delete-user" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod access-control rm-user" ];    then _picocli_fcli_fod_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac list-roles" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac lsr" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac list-groups" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac lsg" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac get-group" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac create-group" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac update-group" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac delete-group" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac rm-group" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac list-users" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac lsu" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac get-user" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac create-user" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac update-user" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac delete-user" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ac rm-user" ];    then _picocli_fcli_fod_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app list" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app ls" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app get" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app create" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app update" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app delete" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app rm" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app list-scans" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod app lss" ];    then _picocli_fcli_fod_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod microservice list" ];    then _picocli_fcli_fod_microservice; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod microservice ls" ];    then _picocli_fcli_fod_microservice; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod microservice create" ];    then _picocli_fcli_fod_microservice; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod microservice update" ];    then _picocli_fcli_fod_microservice; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod microservice delete" ];    then _picocli_fcli_fod_microservice; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod microservice rm" ];    then _picocli_fcli_fod_microservice; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ms list" ];    then _picocli_fcli_fod_ms; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ms ls" ];    then _picocli_fcli_fod_ms; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ms create" ];    then _picocli_fcli_fod_ms; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ms update" ];    then _picocli_fcli_fod_ms; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ms delete" ];    then _picocli_fcli_fod_ms; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod ms rm" ];    then _picocli_fcli_fod_ms; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release list" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release ls" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release get" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release create" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release update" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release delete" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release rm" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release list-assessment-types" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release lsat" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release list-scans" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release lss" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod release wait-for" ];    then _picocli_fcli_fod_release; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel list" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel ls" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel get" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel create" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel update" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel delete" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel rm" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel list-assessment-types" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel lsat" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel list-scans" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel lss" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rel wait-for" ];    then _picocli_fcli_fod_rel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan cancel" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan download" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan download-latest" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan get" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan get-config" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan import" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan list" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan ls" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan setup" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan start" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast-scan wait-for" ];    then _picocli_fcli_fod_sastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast cancel" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast download" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast download-latest" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast get" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast get-config" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast import" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast list" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast ls" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast setup" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast start" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod sast wait-for" ];    then _picocli_fcli_fod_sast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan cancel" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan download" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan download-latest" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan import" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan list" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan ls" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan setup-website" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan setup-workflow" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan setup-api" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan get-config" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan start" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast-scan upload-file" ];    then _picocli_fcli_fod_dastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast cancel" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast download" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast download-latest" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast import" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast list" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast ls" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast setup-website" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast setup-workflow" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast setup-api" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast get-config" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast start" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod dast upload-file" ];    then _picocli_fcli_fod_dast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan cancel" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan download" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan download-latest" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan get" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan get-config" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan import" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan list" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan ls" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan setup" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan start" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast-scan wait-for" ];    then _picocli_fcli_fod_mastscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast cancel" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast download" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast download-latest" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast get" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast get-config" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast import" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast list" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast ls" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast setup" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast start" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod mast wait-for" ];    then _picocli_fcli_fod_mast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan download" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan download-latest" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan get" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan import" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan import-debricked" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan list" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan ls" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan start" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan wait-for" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan list-components" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss-scan lsc" ];    then _picocli_fcli_fod_ossscan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss download" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss download-latest" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss get" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss import" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss import-debricked" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss list" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss ls" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss start" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss wait-for" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss list-components" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod oss lsc" ];    then _picocli_fcli_fod_oss; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod issue list" ];    then _picocli_fcli_fod_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod issue ls" ];    then _picocli_fcli_fod_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod issue update" ];    then _picocli_fcli_fod_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report list" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report ls" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report get" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report create" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report delete" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report rm" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report wait-for" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report download" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report list-templates" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod report lst" ];    then _picocli_fcli_fod_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rest call" ];    then _picocli_fcli_fod_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fod rest lookup" ];    then _picocli_fcli_fod_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast rest" ];    then _picocli_fcli_scdast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan complete" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan delete" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan rm" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan download" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan get" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan import-findings" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan list" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan ls" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan pause" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan publish" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan resume" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan start" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan wait-for" ];    then _picocli_fcli_scdast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy get" ];    then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy list" ];    then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-policy ls" ];    then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings get" ];    then _picocli_fcli_scdast_scansettings; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings list" ];    then _picocli_fcli_scdast_scansettings; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast scan-settings ls" ];    then _picocli_fcli_scdast_scansettings; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor disable" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor enable" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor get" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor list" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast sensor ls" ];    then _picocli_fcli_scdast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-dast rest call" ];    then _picocli_fcli_scdast_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast sensor" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast sensor-pool" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast pool" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast rest" ];    then _picocli_fcli_scsast; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan cancel" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan download" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan list" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan ls" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan start" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan status" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast scan wait-for" ];    then _picocli_fcli_scsast_scan; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast sensor list" ];    then _picocli_fcli_scsast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast sensor ls" ];    then _picocli_fcli_scsast_sensor; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast sensor-pool list" ];    then _picocli_fcli_scsast_sensorpool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast sensor-pool ls" ];    then _picocli_fcli_scsast_sensorpool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast pool list" ];    then _picocli_fcli_scsast_pool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast pool ls" ];    then _picocli_fcli_scsast_pool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} sc-sast rest call" ];    then _picocli_fcli_scsast_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attr" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc performance-indicator" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc pi" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc variable" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc var" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rest" ];    then _picocli_fcli_ssc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session list" ];    then _picocli_fcli_ssc_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session ls" ];    then _picocli_fcli_ssc_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session login" ];    then _picocli_fcli_ssc_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc session logout" ];    then _picocli_fcli_ssc_session; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action get" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action help" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action import" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action list" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action ls" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action reset" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action run" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc action sign" ];    then _picocli_fcli_ssc_action; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control list-token-definitions" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control lstd" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control create-token" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control list-tokens" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control lst" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control revoke-token" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control update-token" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control create-role" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control delete-role" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control rm-role" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control get-role" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control list-roles" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control lsr" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control get-permission" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control list-permissions" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control lsp" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control create-local-user" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control delete-user" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control rm-user" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control get-user" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control list-users" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control lsu" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control list-appversion-users" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc access-control lsavu" ];    then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac list-token-definitions" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac lstd" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac create-token" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac list-tokens" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac lst" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac revoke-token" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac update-token" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac create-role" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac delete-role" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac rm-role" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac get-role" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac list-roles" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac lsr" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac get-permission" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac list-permissions" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac lsp" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac create-local-user" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac delete-user" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac rm-user" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac get-user" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac list-users" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac lsu" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac list-appversion-users" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc ac lsavu" ];    then _picocli_fcli_ssc_ac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert get-definition" ];    then _picocli_fcli_ssc_alert; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert list-definitions" ];    then _picocli_fcli_ssc_alert; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert lsd" ];    then _picocli_fcli_ssc_alert; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert list" ];    then _picocli_fcli_ssc_alert; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc alert ls" ];    then _picocli_fcli_ssc_alert; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app delete" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app rm" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app get" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app list" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app ls" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc app update" ];    then _picocli_fcli_ssc_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion create" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion delete" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion rm" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion copy-state" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion download-state" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion get" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion list" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion ls" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion purge-artifacts" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion refresh-metrics" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc appversion update" ];    then _picocli_fcli_ssc_appversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av create" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av delete" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av rm" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av copy-state" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av download-state" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av get" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av list" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av ls" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av purge-artifacts" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av refresh-metrics" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc av update" ];    then _picocli_fcli_ssc_av; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact approve" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact delete" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact rm" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact download" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact get" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact import-debricked" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact list" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact ls" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact purge" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact upload" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc artifact wait-for" ];    then _picocli_fcli_ssc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute get-definition" ];    then _picocli_fcli_ssc_attribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute list-definitions" ];    then _picocli_fcli_ssc_attribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute lsd" ];    then _picocli_fcli_ssc_attribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute list" ];    then _picocli_fcli_ssc_attribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute ls" ];    then _picocli_fcli_ssc_attribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attribute update" ];    then _picocli_fcli_ssc_attribute; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attr get-definition" ];    then _picocli_fcli_ssc_attr; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attr list-definitions" ];    then _picocli_fcli_ssc_attr; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attr lsd" ];    then _picocli_fcli_ssc_attr; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attr list" ];    then _picocli_fcli_ssc_attr; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attr ls" ];    then _picocli_fcli_ssc_attr; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc attr update" ];    then _picocli_fcli_ssc_attr; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue create-template" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue delete-template" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue rmt" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue download-template" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue get-template" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue list-templates" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue lst" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue update-template" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue get-filterset" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue list-filtersets" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue lsfs" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue get-filter" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue list-filters" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue lsf" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue get-group" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue list-groups" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue lsg" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue count" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue list" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc issue ls" ];    then _picocli_fcli_ssc_issue; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc performance-indicator list-definitions" ];    then _picocli_fcli_ssc_performanceindicator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc performance-indicator lsd" ];    then _picocli_fcli_ssc_performanceindicator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc performance-indicator get" ];    then _picocli_fcli_ssc_performanceindicator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc performance-indicator list" ];    then _picocli_fcli_ssc_performanceindicator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc performance-indicator ls" ];    then _picocli_fcli_ssc_performanceindicator; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc pi list-definitions" ];    then _picocli_fcli_ssc_pi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc pi lsd" ];    then _picocli_fcli_ssc_pi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc pi get" ];    then _picocli_fcli_ssc_pi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc pi list" ];    then _picocli_fcli_ssc_pi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc pi ls" ];    then _picocli_fcli_ssc_pi; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc variable list-definitions" ];    then _picocli_fcli_ssc_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc variable lsd" ];    then _picocli_fcli_ssc_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc variable get" ];    then _picocli_fcli_ssc_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc variable list" ];    then _picocli_fcli_ssc_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc variable ls" ];    then _picocli_fcli_ssc_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc var list-definitions" ];    then _picocli_fcli_ssc_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc var lsd" ];    then _picocli_fcli_ssc_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc var get" ];    then _picocli_fcli_ssc_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc var list" ];    then _picocli_fcli_ssc_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc var ls" ];    then _picocli_fcli_ssc_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin install" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin uninstall" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin enable" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin disable" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin get" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin list" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc plugin ls" ];    then _picocli_fcli_ssc_plugin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report create" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report list" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report ls" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report get" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report download" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report wait-for" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report delete" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report rm" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report list-parameters" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report lsp" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report create-template" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report list-templates" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report lst" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report get-template" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report download-template" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report create-template-config" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report delete-template" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc report rmt" ];    then _picocli_fcli_ssc_report; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state list-activities" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state lsa" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state list-events" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state lse" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state list-settings" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state lss" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state upload-seed-bundle" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state list-rulepacks" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state lsr" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state cancel-job" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state get-job" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state list-jobs" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state lsj" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state update-job" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc system-state wait-for-job" ];    then _picocli_fcli_ssc_systemstate; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state list-activities" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state lsa" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state list-events" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state lse" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state list-settings" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state lss" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state upload-seed-bundle" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state list-rulepacks" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state lsr" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state cancel-job" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state get-job" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state list-jobs" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state lsj" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state update-job" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc state wait-for-job" ];    then _picocli_fcli_ssc_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ssc rest call" ];    then _picocli_fcli_ssc_rest; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool definitions" ];    then _picocli_fcli_tool; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility install" ];    then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility list" ];    then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility ls" ];    then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility list-platforms" ];    then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility lsp" ];    then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility run" ];    then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool bugtracker-utility uninstall" ];    then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu install" ];    then _picocli_fcli_tool_fbtu; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu list" ];    then _picocli_fcli_tool_fbtu; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu ls" ];    then _picocli_fcli_tool_fbtu; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu list-platforms" ];    then _picocli_fcli_tool_fbtu; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu lsp" ];    then _picocli_fcli_tool_fbtu; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu run" ];    then _picocli_fcli_tool_fbtu; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fbtu uninstall" ];    then _picocli_fcli_tool_fbtu; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli install" ];    then _picocli_fcli_tool_debrickedcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli list" ];    then _picocli_fcli_tool_debrickedcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli ls" ];    then _picocli_fcli_tool_debrickedcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli list-platforms" ];    then _picocli_fcli_tool_debrickedcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli lsp" ];    then _picocli_fcli_tool_debrickedcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli run" ];    then _picocli_fcli_tool_debrickedcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool debricked-cli uninstall" ];    then _picocli_fcli_tool_debrickedcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli install" ];    then _picocli_fcli_tool_dcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli list" ];    then _picocli_fcli_tool_dcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli ls" ];    then _picocli_fcli_tool_dcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli list-platforms" ];    then _picocli_fcli_tool_dcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli lsp" ];    then _picocli_fcli_tool_dcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli run" ];    then _picocli_fcli_tool_dcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool dcli uninstall" ];    then _picocli_fcli_tool_dcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli install" ];    then _picocli_fcli_tool_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli list" ];    then _picocli_fcli_tool_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli ls" ];    then _picocli_fcli_tool_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli list-platforms" ];    then _picocli_fcli_tool_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli lsp" ];    then _picocli_fcli_tool_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli run" ];    then _picocli_fcli_tool_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fcli uninstall" ];    then _picocli_fcli_tool_fcli; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader install" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader list" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader ls" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader list-platforms" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader lsp" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader run" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fod-uploader uninstall" ];    then _picocli_fcli_tool_foduploader; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload install" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload list" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload ls" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload list-platforms" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload lsp" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload run" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fodupload uninstall" ];    then _picocli_fcli_tool_fodupload; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client install" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client list" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client ls" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client list-platforms" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client lsp" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client run" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool sc-client uninstall" ];    then _picocli_fcli_tool_scclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client install" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client list" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client ls" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client list-platforms" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client lsp" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client run" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool scancentral-client uninstall" ];    then _picocli_fcli_tool_scancentralclient; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter install" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter list" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter ls" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter list-platforms" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter lsp" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter run" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool vuln-exporter uninstall" ];    then _picocli_fcli_tool_vulnexporter; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve install" ];    then _picocli_fcli_tool_fve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve list" ];    then _picocli_fcli_tool_fve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve ls" ];    then _picocli_fcli_tool_fve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve list-platforms" ];    then _picocli_fcli_tool_fve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve lsp" ];    then _picocli_fcli_tool_fve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve run" ];    then _picocli_fcli_tool_fve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool fve uninstall" ];    then _picocli_fcli_tool_fve; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool definitions list" ];    then _picocli_fcli_tool_definitions; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool definitions ls" ];    then _picocli_fcli_tool_definitions; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool definitions update" ];    then _picocli_fcli_tool_definitions; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} tool definitions reset" ];    then _picocli_fcli_tool_definitions; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} license msp-report" ];    then _picocli_fcli_license; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} license ncd-report" ];    then _picocli_fcli_license; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} license msp-report create" ];    then _picocli_fcli_license_mspreport; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} license msp-report create-config" ];    then _picocli_fcli_license_mspreport; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} license ncd-report create" ];    then _picocli_fcli_license_ncdreport; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} license ncd-report create-config" ];    then _picocli_fcli_license_ncdreport; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util all-commands" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util auto-complete" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util crypto" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util state" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var" ];    then _picocli_fcli_util; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util all-commands usage" ];    then _picocli_fcli_util_allcommands; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util all-commands list" ];    then _picocli_fcli_util_allcommands; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util all-commands ls" ];    then _picocli_fcli_util_allcommands; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util auto-complete generate" ];    then _picocli_fcli_util_autocomplete; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util crypto encrypt" ];    then _picocli_fcli_util_crypto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util crypto decrypt" ];    then _picocli_fcli_util_crypto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util state clear" ];    then _picocli_fcli_util_state; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable contents" ];    then _picocli_fcli_util_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable clear" ];    then _picocli_fcli_util_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable delete" ];    then _picocli_fcli_util_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable rm" ];    then _picocli_fcli_util_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable get" ];    then _picocli_fcli_util_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable list" ];    then _picocli_fcli_util_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util variable ls" ];    then _picocli_fcli_util_variable; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var contents" ];    then _picocli_fcli_util_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var clear" ];    then _picocli_fcli_util_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var delete" ];    then _picocli_fcli_util_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var rm" ];    then _picocli_fcli_util_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var get" ];    then _picocli_fcli_util_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var list" ];    then _picocli_fcli_util_var; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} util var ls" ];    then _picocli_fcli_util_var; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(action)
  local cmds1=(aviator)
  local cmds2=(config)
  local cmds3=(cfg)
  local cmds4=(fod)
  local cmds5=(sc-dast)
  local cmds6=(sc-sast)
  local cmds7=(ssc)
  local cmds8=(tool)
  local cmds9=(license)
  local cmds10=(util)
  local cmds11=(action get)
  local cmds12=(action help)
  local cmds13=(action import)
  local cmds14=(action list)
  local cmds15=(action ls)
  local cmds16=(action reset)
  local cmds17=(action run)
  local cmds18=(action sign)
  local cmds19=(aviator admin-config)
  local cmds20=(aviator session)
  local cmds21=(aviator app)
  local cmds22=(aviator entitlement)
  local cmds23=(aviator ssc)
  local cmds24=(aviator token)
  local cmds25=(aviator admin-config list)
  local cmds26=(aviator admin-config ls)
  local cmds27=(aviator admin-config create)
  local cmds28=(aviator admin-config delete)
  local cmds29=(aviator admin-config rm)
  local cmds30=(aviator session list)
  local cmds31=(aviator session ls)
  local cmds32=(aviator session login)
  local cmds33=(aviator session logout)
  local cmds34=(aviator app create)
  local cmds35=(aviator app delete)
  local cmds36=(aviator app rm)
  local cmds37=(aviator app get)
  local cmds38=(aviator app list)
  local cmds39=(aviator app ls)
  local cmds40=(aviator app update)
  local cmds41=(aviator entitlement list)
  local cmds42=(aviator entitlement ls)
  local cmds43=(aviator ssc audit)
  local cmds44=(aviator token create)
  local cmds45=(aviator token delete)
  local cmds46=(aviator token rm)
  local cmds47=(aviator token list)
  local cmds48=(aviator token ls)
  local cmds49=(aviator token revoke)
  local cmds50=(aviator token validate)
  local cmds51=(config clear)
  local cmds52=(config proxy)
  local cmds53=(config public-key)
  local cmds54=(config pubkey)
  local cmds55=(config truststore)
  local cmds56=(config proxy add)
  local cmds57=(config proxy clear)
  local cmds58=(config proxy delete)
  local cmds59=(config proxy rm)
  local cmds60=(config proxy list)
  local cmds61=(config proxy ls)
  local cmds62=(config proxy update)
  local cmds63=(config public-key clear)
  local cmds64=(config public-key delete)
  local cmds65=(config public-key rm)
  local cmds66=(config public-key get)
  local cmds67=(config public-key list)
  local cmds68=(config public-key ls)
  local cmds69=(config public-key import)
  local cmds70=(config pubkey clear)
  local cmds71=(config pubkey delete)
  local cmds72=(config pubkey rm)
  local cmds73=(config pubkey get)
  local cmds74=(config pubkey list)
  local cmds75=(config pubkey ls)
  local cmds76=(config pubkey import)
  local cmds77=(config truststore clear)
  local cmds78=(config truststore get)
  local cmds79=(config truststore set)
  local cmds80=(cfg clear)
  local cmds81=(cfg proxy)
  local cmds82=(cfg public-key)
  local cmds83=(cfg pubkey)
  local cmds84=(cfg truststore)
  local cmds85=(cfg proxy add)
  local cmds86=(cfg proxy clear)
  local cmds87=(cfg proxy delete)
  local cmds88=(cfg proxy rm)
  local cmds89=(cfg proxy list)
  local cmds90=(cfg proxy ls)
  local cmds91=(cfg proxy update)
  local cmds92=(cfg public-key clear)
  local cmds93=(cfg public-key delete)
  local cmds94=(cfg public-key rm)
  local cmds95=(cfg public-key get)
  local cmds96=(cfg public-key list)
  local cmds97=(cfg public-key ls)
  local cmds98=(cfg public-key import)
  local cmds99=(cfg pubkey clear)
  local cmds100=(cfg pubkey delete)
  local cmds101=(cfg pubkey rm)
  local cmds102=(cfg pubkey get)
  local cmds103=(cfg pubkey list)
  local cmds104=(cfg pubkey ls)
  local cmds105=(cfg pubkey import)
  local cmds106=(cfg truststore clear)
  local cmds107=(cfg truststore get)
  local cmds108=(cfg truststore set)
  local cmds109=(fod session)
  local cmds110=(fod action)
  local cmds111=(fod access-control)
  local cmds112=(fod ac)
  local cmds113=(fod app)
  local cmds114=(fod microservice)
  local cmds115=(fod ms)
  local cmds116=(fod release)
  local cmds117=(fod rel)
  local cmds118=(fod sast-scan)
  local cmds119=(fod sast)
  local cmds120=(fod dast-scan)
  local cmds121=(fod dast)
  local cmds122=(fod mast-scan)
  local cmds123=(fod mast)
  local cmds124=(fod oss-scan)
  local cmds125=(fod oss)
  local cmds126=(fod issue)
  local cmds127=(fod report)
  local cmds128=(fod rest)
  local cmds129=(fod session list)
  local cmds130=(fod session ls)
  local cmds131=(fod session login)
  local cmds132=(fod session logout)
  local cmds133=(fod action get)
  local cmds134=(fod action help)
  local cmds135=(fod action import)
  local cmds136=(fod action list)
  local cmds137=(fod action ls)
  local cmds138=(fod action reset)
  local cmds139=(fod action run)
  local cmds140=(fod action sign)
  local cmds141=(fod access-control list-roles)
  local cmds142=(fod access-control lsr)
  local cmds143=(fod access-control list-groups)
  local cmds144=(fod access-control lsg)
  local cmds145=(fod access-control get-group)
  local cmds146=(fod access-control create-group)
  local cmds147=(fod access-control update-group)
  local cmds148=(fod access-control delete-group)
  local cmds149=(fod access-control rm-group)
  local cmds150=(fod access-control list-users)
  local cmds151=(fod access-control lsu)
  local cmds152=(fod access-control get-user)
  local cmds153=(fod access-control create-user)
  local cmds154=(fod access-control update-user)
  local cmds155=(fod access-control delete-user)
  local cmds156=(fod access-control rm-user)
  local cmds157=(fod ac list-roles)
  local cmds158=(fod ac lsr)
  local cmds159=(fod ac list-groups)
  local cmds160=(fod ac lsg)
  local cmds161=(fod ac get-group)
  local cmds162=(fod ac create-group)
  local cmds163=(fod ac update-group)
  local cmds164=(fod ac delete-group)
  local cmds165=(fod ac rm-group)
  local cmds166=(fod ac list-users)
  local cmds167=(fod ac lsu)
  local cmds168=(fod ac get-user)
  local cmds169=(fod ac create-user)
  local cmds170=(fod ac update-user)
  local cmds171=(fod ac delete-user)
  local cmds172=(fod ac rm-user)
  local cmds173=(fod app list)
  local cmds174=(fod app ls)
  local cmds175=(fod app get)
  local cmds176=(fod app create)
  local cmds177=(fod app update)
  local cmds178=(fod app delete)
  local cmds179=(fod app rm)
  local cmds180=(fod app list-scans)
  local cmds181=(fod app lss)
  local cmds182=(fod microservice list)
  local cmds183=(fod microservice ls)
  local cmds184=(fod microservice create)
  local cmds185=(fod microservice update)
  local cmds186=(fod microservice delete)
  local cmds187=(fod microservice rm)
  local cmds188=(fod ms list)
  local cmds189=(fod ms ls)
  local cmds190=(fod ms create)
  local cmds191=(fod ms update)
  local cmds192=(fod ms delete)
  local cmds193=(fod ms rm)
  local cmds194=(fod release list)
  local cmds195=(fod release ls)
  local cmds196=(fod release get)
  local cmds197=(fod release create)
  local cmds198=(fod release update)
  local cmds199=(fod release delete)
  local cmds200=(fod release rm)
  local cmds201=(fod release list-assessment-types)
  local cmds202=(fod release lsat)
  local cmds203=(fod release list-scans)
  local cmds204=(fod release lss)
  local cmds205=(fod release wait-for)
  local cmds206=(fod rel list)
  local cmds207=(fod rel ls)
  local cmds208=(fod rel get)
  local cmds209=(fod rel create)
  local cmds210=(fod rel update)
  local cmds211=(fod rel delete)
  local cmds212=(fod rel rm)
  local cmds213=(fod rel list-assessment-types)
  local cmds214=(fod rel lsat)
  local cmds215=(fod rel list-scans)
  local cmds216=(fod rel lss)
  local cmds217=(fod rel wait-for)
  local cmds218=(fod sast-scan cancel)
  local cmds219=(fod sast-scan download)
  local cmds220=(fod sast-scan download-latest)
  local cmds221=(fod sast-scan get)
  local cmds222=(fod sast-scan get-config)
  local cmds223=(fod sast-scan import)
  local cmds224=(fod sast-scan list)
  local cmds225=(fod sast-scan ls)
  local cmds226=(fod sast-scan setup)
  local cmds227=(fod sast-scan start)
  local cmds228=(fod sast-scan wait-for)
  local cmds229=(fod sast cancel)
  local cmds230=(fod sast download)
  local cmds231=(fod sast download-latest)
  local cmds232=(fod sast get)
  local cmds233=(fod sast get-config)
  local cmds234=(fod sast import)
  local cmds235=(fod sast list)
  local cmds236=(fod sast ls)
  local cmds237=(fod sast setup)
  local cmds238=(fod sast start)
  local cmds239=(fod sast wait-for)
  local cmds240=(fod dast-scan cancel)
  local cmds241=(fod dast-scan download)
  local cmds242=(fod dast-scan download-latest)
  local cmds243=(fod dast-scan import)
  local cmds244=(fod dast-scan list)
  local cmds245=(fod dast-scan ls)
  local cmds246=(fod dast-scan setup-website)
  local cmds247=(fod dast-scan setup-workflow)
  local cmds248=(fod dast-scan setup-api)
  local cmds249=(fod dast-scan get-config)
  local cmds250=(fod dast-scan start)
  local cmds251=(fod dast-scan upload-file)
  local cmds252=(fod dast cancel)
  local cmds253=(fod dast download)
  local cmds254=(fod dast download-latest)
  local cmds255=(fod dast import)
  local cmds256=(fod dast list)
  local cmds257=(fod dast ls)
  local cmds258=(fod dast setup-website)
  local cmds259=(fod dast setup-workflow)
  local cmds260=(fod dast setup-api)
  local cmds261=(fod dast get-config)
  local cmds262=(fod dast start)
  local cmds263=(fod dast upload-file)
  local cmds264=(fod mast-scan cancel)
  local cmds265=(fod mast-scan download)
  local cmds266=(fod mast-scan download-latest)
  local cmds267=(fod mast-scan get)
  local cmds268=(fod mast-scan get-config)
  local cmds269=(fod mast-scan import)
  local cmds270=(fod mast-scan list)
  local cmds271=(fod mast-scan ls)
  local cmds272=(fod mast-scan setup)
  local cmds273=(fod mast-scan start)
  local cmds274=(fod mast-scan wait-for)
  local cmds275=(fod mast cancel)
  local cmds276=(fod mast download)
  local cmds277=(fod mast download-latest)
  local cmds278=(fod mast get)
  local cmds279=(fod mast get-config)
  local cmds280=(fod mast import)
  local cmds281=(fod mast list)
  local cmds282=(fod mast ls)
  local cmds283=(fod mast setup)
  local cmds284=(fod mast start)
  local cmds285=(fod mast wait-for)
  local cmds286=(fod oss-scan download)
  local cmds287=(fod oss-scan download-latest)
  local cmds288=(fod oss-scan get)
  local cmds289=(fod oss-scan import)
  local cmds290=(fod oss-scan import-debricked)
  local cmds291=(fod oss-scan list)
  local cmds292=(fod oss-scan ls)
  local cmds293=(fod oss-scan start)
  local cmds294=(fod oss-scan wait-for)
  local cmds295=(fod oss-scan list-components)
  local cmds296=(fod oss-scan lsc)
  local cmds297=(fod oss download)
  local cmds298=(fod oss download-latest)
  local cmds299=(fod oss get)
  local cmds300=(fod oss import)
  local cmds301=(fod oss import-debricked)
  local cmds302=(fod oss list)
  local cmds303=(fod oss ls)
  local cmds304=(fod oss start)
  local cmds305=(fod oss wait-for)
  local cmds306=(fod oss list-components)
  local cmds307=(fod oss lsc)
  local cmds308=(fod issue list)
  local cmds309=(fod issue ls)
  local cmds310=(fod issue update)
  local cmds311=(fod report list)
  local cmds312=(fod report ls)
  local cmds313=(fod report get)
  local cmds314=(fod report create)
  local cmds315=(fod report delete)
  local cmds316=(fod report rm)
  local cmds317=(fod report wait-for)
  local cmds318=(fod report download)
  local cmds319=(fod report list-templates)
  local cmds320=(fod report lst)
  local cmds321=(fod rest call)
  local cmds322=(fod rest lookup)
  local cmds323=(sc-dast scan)
  local cmds324=(sc-dast scan-policy)
  local cmds325=(sc-dast scan-settings)
  local cmds326=(sc-dast sensor)
  local cmds327=(sc-dast rest)
  local cmds328=(sc-dast scan complete)
  local cmds329=(sc-dast scan delete)
  local cmds330=(sc-dast scan rm)
  local cmds331=(sc-dast scan download)
  local cmds332=(sc-dast scan get)
  local cmds333=(sc-dast scan import-findings)
  local cmds334=(sc-dast scan list)
  local cmds335=(sc-dast scan ls)
  local cmds336=(sc-dast scan pause)
  local cmds337=(sc-dast scan publish)
  local cmds338=(sc-dast scan resume)
  local cmds339=(sc-dast scan start)
  local cmds340=(sc-dast scan wait-for)
  local cmds341=(sc-dast scan-policy get)
  local cmds342=(sc-dast scan-policy list)
  local cmds343=(sc-dast scan-policy ls)
  local cmds344=(sc-dast scan-settings get)
  local cmds345=(sc-dast scan-settings list)
  local cmds346=(sc-dast scan-settings ls)
  local cmds347=(sc-dast sensor disable)
  local cmds348=(sc-dast sensor enable)
  local cmds349=(sc-dast sensor get)
  local cmds350=(sc-dast sensor list)
  local cmds351=(sc-dast sensor ls)
  local cmds352=(sc-dast rest call)
  local cmds353=(sc-sast scan)
  local cmds354=(sc-sast sensor)
  local cmds355=(sc-sast sensor-pool)
  local cmds356=(sc-sast pool)
  local cmds357=(sc-sast rest)
  local cmds358=(sc-sast scan cancel)
  local cmds359=(sc-sast scan download)
  local cmds360=(sc-sast scan list)
  local cmds361=(sc-sast scan ls)
  local cmds362=(sc-sast scan start)
  local cmds363=(sc-sast scan status)
  local cmds364=(sc-sast scan wait-for)
  local cmds365=(sc-sast sensor list)
  local cmds366=(sc-sast sensor ls)
  local cmds367=(sc-sast sensor-pool list)
  local cmds368=(sc-sast sensor-pool ls)
  local cmds369=(sc-sast pool list)
  local cmds370=(sc-sast pool ls)
  local cmds371=(sc-sast rest call)
  local cmds372=(ssc session)
  local cmds373=(ssc action)
  local cmds374=(ssc access-control)
  local cmds375=(ssc ac)
  local cmds376=(ssc alert)
  local cmds377=(ssc app)
  local cmds378=(ssc appversion)
  local cmds379=(ssc av)
  local cmds380=(ssc artifact)
  local cmds381=(ssc attribute)
  local cmds382=(ssc attr)
  local cmds383=(ssc issue)
  local cmds384=(ssc performance-indicator)
  local cmds385=(ssc pi)
  local cmds386=(ssc variable)
  local cmds387=(ssc var)
  local cmds388=(ssc plugin)
  local cmds389=(ssc report)
  local cmds390=(ssc system-state)
  local cmds391=(ssc state)
  local cmds392=(ssc rest)
  local cmds393=(ssc session list)
  local cmds394=(ssc session ls)
  local cmds395=(ssc session login)
  local cmds396=(ssc session logout)
  local cmds397=(ssc action get)
  local cmds398=(ssc action help)
  local cmds399=(ssc action import)
  local cmds400=(ssc action list)
  local cmds401=(ssc action ls)
  local cmds402=(ssc action reset)
  local cmds403=(ssc action run)
  local cmds404=(ssc action sign)
  local cmds405=(ssc access-control list-token-definitions)
  local cmds406=(ssc access-control lstd)
  local cmds407=(ssc access-control create-token)
  local cmds408=(ssc access-control list-tokens)
  local cmds409=(ssc access-control lst)
  local cmds410=(ssc access-control revoke-token)
  local cmds411=(ssc access-control update-token)
  local cmds412=(ssc access-control create-role)
  local cmds413=(ssc access-control delete-role)
  local cmds414=(ssc access-control rm-role)
  local cmds415=(ssc access-control get-role)
  local cmds416=(ssc access-control list-roles)
  local cmds417=(ssc access-control lsr)
  local cmds418=(ssc access-control get-permission)
  local cmds419=(ssc access-control list-permissions)
  local cmds420=(ssc access-control lsp)
  local cmds421=(ssc access-control create-local-user)
  local cmds422=(ssc access-control delete-user)
  local cmds423=(ssc access-control rm-user)
  local cmds424=(ssc access-control get-user)
  local cmds425=(ssc access-control list-users)
  local cmds426=(ssc access-control lsu)
  local cmds427=(ssc access-control list-appversion-users)
  local cmds428=(ssc access-control lsavu)
  local cmds429=(ssc ac list-token-definitions)
  local cmds430=(ssc ac lstd)
  local cmds431=(ssc ac create-token)
  local cmds432=(ssc ac list-tokens)
  local cmds433=(ssc ac lst)
  local cmds434=(ssc ac revoke-token)
  local cmds435=(ssc ac update-token)
  local cmds436=(ssc ac create-role)
  local cmds437=(ssc ac delete-role)
  local cmds438=(ssc ac rm-role)
  local cmds439=(ssc ac get-role)
  local cmds440=(ssc ac list-roles)
  local cmds441=(ssc ac lsr)
  local cmds442=(ssc ac get-permission)
  local cmds443=(ssc ac list-permissions)
  local cmds444=(ssc ac lsp)
  local cmds445=(ssc ac create-local-user)
  local cmds446=(ssc ac delete-user)
  local cmds447=(ssc ac rm-user)
  local cmds448=(ssc ac get-user)
  local cmds449=(ssc ac list-users)
  local cmds450=(ssc ac lsu)
  local cmds451=(ssc ac list-appversion-users)
  local cmds452=(ssc ac lsavu)
  local cmds453=(ssc alert get-definition)
  local cmds454=(ssc alert list-definitions)
  local cmds455=(ssc alert lsd)
  local cmds456=(ssc alert list)
  local cmds457=(ssc alert ls)
  local cmds458=(ssc app delete)
  local cmds459=(ssc app rm)
  local cmds460=(ssc app get)
  local cmds461=(ssc app list)
  local cmds462=(ssc app ls)
  local cmds463=(ssc app update)
  local cmds464=(ssc appversion create)
  local cmds465=(ssc appversion delete)
  local cmds466=(ssc appversion rm)
  local cmds467=(ssc appversion copy-state)
  local cmds468=(ssc appversion download-state)
  local cmds469=(ssc appversion get)
  local cmds470=(ssc appversion list)
  local cmds471=(ssc appversion ls)
  local cmds472=(ssc appversion purge-artifacts)
  local cmds473=(ssc appversion refresh-metrics)
  local cmds474=(ssc appversion update)
  local cmds475=(ssc av create)
  local cmds476=(ssc av delete)
  local cmds477=(ssc av rm)
  local cmds478=(ssc av copy-state)
  local cmds479=(ssc av download-state)
  local cmds480=(ssc av get)
  local cmds481=(ssc av list)
  local cmds482=(ssc av ls)
  local cmds483=(ssc av purge-artifacts)
  local cmds484=(ssc av refresh-metrics)
  local cmds485=(ssc av update)
  local cmds486=(ssc artifact approve)
  local cmds487=(ssc artifact delete)
  local cmds488=(ssc artifact rm)
  local cmds489=(ssc artifact download)
  local cmds490=(ssc artifact get)
  local cmds491=(ssc artifact import-debricked)
  local cmds492=(ssc artifact list)
  local cmds493=(ssc artifact ls)
  local cmds494=(ssc artifact purge)
  local cmds495=(ssc artifact upload)
  local cmds496=(ssc artifact wait-for)
  local cmds497=(ssc attribute get-definition)
  local cmds498=(ssc attribute list-definitions)
  local cmds499=(ssc attribute lsd)
  local cmds500=(ssc attribute list)
  local cmds501=(ssc attribute ls)
  local cmds502=(ssc attribute update)
  local cmds503=(ssc attr get-definition)
  local cmds504=(ssc attr list-definitions)
  local cmds505=(ssc attr lsd)
  local cmds506=(ssc attr list)
  local cmds507=(ssc attr ls)
  local cmds508=(ssc attr update)
  local cmds509=(ssc issue create-template)
  local cmds510=(ssc issue delete-template)
  local cmds511=(ssc issue rmt)
  local cmds512=(ssc issue download-template)
  local cmds513=(ssc issue get-template)
  local cmds514=(ssc issue list-templates)
  local cmds515=(ssc issue lst)
  local cmds516=(ssc issue update-template)
  local cmds517=(ssc issue get-filterset)
  local cmds518=(ssc issue list-filtersets)
  local cmds519=(ssc issue lsfs)
  local cmds520=(ssc issue get-filter)
  local cmds521=(ssc issue list-filters)
  local cmds522=(ssc issue lsf)
  local cmds523=(ssc issue get-group)
  local cmds524=(ssc issue list-groups)
  local cmds525=(ssc issue lsg)
  local cmds526=(ssc issue count)
  local cmds527=(ssc issue list)
  local cmds528=(ssc issue ls)
  local cmds529=(ssc performance-indicator list-definitions)
  local cmds530=(ssc performance-indicator lsd)
  local cmds531=(ssc performance-indicator get)
  local cmds532=(ssc performance-indicator list)
  local cmds533=(ssc performance-indicator ls)
  local cmds534=(ssc pi list-definitions)
  local cmds535=(ssc pi lsd)
  local cmds536=(ssc pi get)
  local cmds537=(ssc pi list)
  local cmds538=(ssc pi ls)
  local cmds539=(ssc variable list-definitions)
  local cmds540=(ssc variable lsd)
  local cmds541=(ssc variable get)
  local cmds542=(ssc variable list)
  local cmds543=(ssc variable ls)
  local cmds544=(ssc var list-definitions)
  local cmds545=(ssc var lsd)
  local cmds546=(ssc var get)
  local cmds547=(ssc var list)
  local cmds548=(ssc var ls)
  local cmds549=(ssc plugin install)
  local cmds550=(ssc plugin uninstall)
  local cmds551=(ssc plugin enable)
  local cmds552=(ssc plugin disable)
  local cmds553=(ssc plugin get)
  local cmds554=(ssc plugin list)
  local cmds555=(ssc plugin ls)
  local cmds556=(ssc report create)
  local cmds557=(ssc report list)
  local cmds558=(ssc report ls)
  local cmds559=(ssc report get)
  local cmds560=(ssc report download)
  local cmds561=(ssc report wait-for)
  local cmds562=(ssc report delete)
  local cmds563=(ssc report rm)
  local cmds564=(ssc report list-parameters)
  local cmds565=(ssc report lsp)
  local cmds566=(ssc report create-template)
  local cmds567=(ssc report list-templates)
  local cmds568=(ssc report lst)
  local cmds569=(ssc report get-template)
  local cmds570=(ssc report download-template)
  local cmds571=(ssc report create-template-config)
  local cmds572=(ssc report delete-template)
  local cmds573=(ssc report rmt)
  local cmds574=(ssc system-state list-activities)
  local cmds575=(ssc system-state lsa)
  local cmds576=(ssc system-state list-events)
  local cmds577=(ssc system-state lse)
  local cmds578=(ssc system-state list-settings)
  local cmds579=(ssc system-state lss)
  local cmds580=(ssc system-state upload-seed-bundle)
  local cmds581=(ssc system-state list-rulepacks)
  local cmds582=(ssc system-state lsr)
  local cmds583=(ssc system-state cancel-job)
  local cmds584=(ssc system-state get-job)
  local cmds585=(ssc system-state list-jobs)
  local cmds586=(ssc system-state lsj)
  local cmds587=(ssc system-state update-job)
  local cmds588=(ssc system-state wait-for-job)
  local cmds589=(ssc state list-activities)
  local cmds590=(ssc state lsa)
  local cmds591=(ssc state list-events)
  local cmds592=(ssc state lse)
  local cmds593=(ssc state list-settings)
  local cmds594=(ssc state lss)
  local cmds595=(ssc state upload-seed-bundle)
  local cmds596=(ssc state list-rulepacks)
  local cmds597=(ssc state lsr)
  local cmds598=(ssc state cancel-job)
  local cmds599=(ssc state get-job)
  local cmds600=(ssc state list-jobs)
  local cmds601=(ssc state lsj)
  local cmds602=(ssc state update-job)
  local cmds603=(ssc state wait-for-job)
  local cmds604=(ssc rest call)
  local cmds605=(tool bugtracker-utility)
  local cmds606=(tool fbtu)
  local cmds607=(tool debricked-cli)
  local cmds608=(tool dcli)
  local cmds609=(tool fcli)
  local cmds610=(tool fod-uploader)
  local cmds611=(tool fodupload)
  local cmds612=(tool sc-client)
  local cmds613=(tool scancentral-client)
  local cmds614=(tool vuln-exporter)
  local cmds615=(tool fve)
  local cmds616=(tool definitions)
  local cmds617=(tool bugtracker-utility install)
  local cmds618=(tool bugtracker-utility list)
  local cmds619=(tool bugtracker-utility ls)
  local cmds620=(tool bugtracker-utility list-platforms)
  local cmds621=(tool bugtracker-utility lsp)
  local cmds622=(tool bugtracker-utility run)
  local cmds623=(tool bugtracker-utility uninstall)
  local cmds624=(tool fbtu install)
  local cmds625=(tool fbtu list)
  local cmds626=(tool fbtu ls)
  local cmds627=(tool fbtu list-platforms)
  local cmds628=(tool fbtu lsp)
  local cmds629=(tool fbtu run)
  local cmds630=(tool fbtu uninstall)
  local cmds631=(tool debricked-cli install)
  local cmds632=(tool debricked-cli list)
  local cmds633=(tool debricked-cli ls)
  local cmds634=(tool debricked-cli list-platforms)
  local cmds635=(tool debricked-cli lsp)
  local cmds636=(tool debricked-cli run)
  local cmds637=(tool debricked-cli uninstall)
  local cmds638=(tool dcli install)
  local cmds639=(tool dcli list)
  local cmds640=(tool dcli ls)
  local cmds641=(tool dcli list-platforms)
  local cmds642=(tool dcli lsp)
  local cmds643=(tool dcli run)
  local cmds644=(tool dcli uninstall)
  local cmds645=(tool fcli install)
  local cmds646=(tool fcli list)
  local cmds647=(tool fcli ls)
  local cmds648=(tool fcli list-platforms)
  local cmds649=(tool fcli lsp)
  local cmds650=(tool fcli run)
  local cmds651=(tool fcli uninstall)
  local cmds652=(tool fod-uploader install)
  local cmds653=(tool fod-uploader list)
  local cmds654=(tool fod-uploader ls)
  local cmds655=(tool fod-uploader list-platforms)
  local cmds656=(tool fod-uploader lsp)
  local cmds657=(tool fod-uploader run)
  local cmds658=(tool fod-uploader uninstall)
  local cmds659=(tool fodupload install)
  local cmds660=(tool fodupload list)
  local cmds661=(tool fodupload ls)
  local cmds662=(tool fodupload list-platforms)
  local cmds663=(tool fodupload lsp)
  local cmds664=(tool fodupload run)
  local cmds665=(tool fodupload uninstall)
  local cmds666=(tool sc-client install)
  local cmds667=(tool sc-client list)
  local cmds668=(tool sc-client ls)
  local cmds669=(tool sc-client list-platforms)
  local cmds670=(tool sc-client lsp)
  local cmds671=(tool sc-client run)
  local cmds672=(tool sc-client uninstall)
  local cmds673=(tool scancentral-client install)
  local cmds674=(tool scancentral-client list)
  local cmds675=(tool scancentral-client ls)
  local cmds676=(tool scancentral-client list-platforms)
  local cmds677=(tool scancentral-client lsp)
  local cmds678=(tool scancentral-client run)
  local cmds679=(tool scancentral-client uninstall)
  local cmds680=(tool vuln-exporter install)
  local cmds681=(tool vuln-exporter list)
  local cmds682=(tool vuln-exporter ls)
  local cmds683=(tool vuln-exporter list-platforms)
  local cmds684=(tool vuln-exporter lsp)
  local cmds685=(tool vuln-exporter run)
  local cmds686=(tool vuln-exporter uninstall)
  local cmds687=(tool fve install)
  local cmds688=(tool fve list)
  local cmds689=(tool fve ls)
  local cmds690=(tool fve list-platforms)
  local cmds691=(tool fve lsp)
  local cmds692=(tool fve run)
  local cmds693=(tool fve uninstall)
  local cmds694=(tool definitions list)
  local cmds695=(tool definitions ls)
  local cmds696=(tool definitions update)
  local cmds697=(tool definitions reset)
  local cmds698=(license msp-report)
  local cmds699=(license ncd-report)
  local cmds700=(license msp-report create)
  local cmds701=(license msp-report create-config)
  local cmds702=(license ncd-report create)
  local cmds703=(license ncd-report create-config)
  local cmds704=(util all-commands)
  local cmds705=(util auto-complete)
  local cmds706=(util crypto)
  local cmds707=(util state)
  local cmds708=(util variable)
  local cmds709=(util var)
  local cmds710=(util all-commands usage)
  local cmds711=(util all-commands list)
  local cmds712=(util all-commands ls)
  local cmds713=(util auto-complete generate)
  local cmds714=(util crypto encrypt)
  local cmds715=(util crypto decrypt)
  local cmds716=(util state clear)
  local cmds717=(util variable contents)
  local cmds718=(util variable clear)
  local cmds719=(util variable delete)
  local cmds720=(util variable rm)
  local cmds721=(util variable get)
  local cmds722=(util variable list)
  local cmds723=(util variable ls)
  local cmds724=(util var contents)
  local cmds725=(util var clear)
  local cmds726=(util var delete)
  local cmds727=(util var rm)
  local cmds728=(util var get)
  local cmds729=(util var list)
  local cmds730=(util var ls)

  if CompWordsContainsArray "${cmds730[@]}"; then _picocli_fcli_util_var_ls; return $?; fi
  if CompWordsContainsArray "${cmds729[@]}"; then _picocli_fcli_util_var_list; return $?; fi
  if CompWordsContainsArray "${cmds728[@]}"; then _picocli_fcli_util_var_get; return $?; fi
  if CompWordsContainsArray "${cmds727[@]}"; then _picocli_fcli_util_var_rm; return $?; fi
  if CompWordsContainsArray "${cmds726[@]}"; then _picocli_fcli_util_var_delete; return $?; fi
  if CompWordsContainsArray "${cmds725[@]}"; then _picocli_fcli_util_var_clear; return $?; fi
  if CompWordsContainsArray "${cmds724[@]}"; then _picocli_fcli_util_var_contents; return $?; fi
  if CompWordsContainsArray "${cmds723[@]}"; then _picocli_fcli_util_variable_ls; return $?; fi
  if CompWordsContainsArray "${cmds722[@]}"; then _picocli_fcli_util_variable_list; return $?; fi
  if CompWordsContainsArray "${cmds721[@]}"; then _picocli_fcli_util_variable_get; return $?; fi
  if CompWordsContainsArray "${cmds720[@]}"; then _picocli_fcli_util_variable_rm; return $?; fi
  if CompWordsContainsArray "${cmds719[@]}"; then _picocli_fcli_util_variable_delete; return $?; fi
  if CompWordsContainsArray "${cmds718[@]}"; then _picocli_fcli_util_variable_clear; return $?; fi
  if CompWordsContainsArray "${cmds717[@]}"; then _picocli_fcli_util_variable_contents; return $?; fi
  if CompWordsContainsArray "${cmds716[@]}"; then _picocli_fcli_util_state_clear; return $?; fi
  if CompWordsContainsArray "${cmds715[@]}"; then _picocli_fcli_util_crypto_decrypt; return $?; fi
  if CompWordsContainsArray "${cmds714[@]}"; then _picocli_fcli_util_crypto_encrypt; return $?; fi
  if CompWordsContainsArray "${cmds713[@]}"; then _picocli_fcli_util_autocomplete_generate; return $?; fi
  if CompWordsContainsArray "${cmds712[@]}"; then _picocli_fcli_util_allcommands_ls; return $?; fi
  if CompWordsContainsArray "${cmds711[@]}"; then _picocli_fcli_util_allcommands_list; return $?; fi
  if CompWordsContainsArray "${cmds710[@]}"; then _picocli_fcli_util_allcommands_usage; return $?; fi
  if CompWordsContainsArray "${cmds709[@]}"; then _picocli_fcli_util_var; return $?; fi
  if CompWordsContainsArray "${cmds708[@]}"; then _picocli_fcli_util_variable; return $?; fi
  if CompWordsContainsArray "${cmds707[@]}"; then _picocli_fcli_util_state; return $?; fi
  if CompWordsContainsArray "${cmds706[@]}"; then _picocli_fcli_util_crypto; return $?; fi
  if CompWordsContainsArray "${cmds705[@]}"; then _picocli_fcli_util_autocomplete; return $?; fi
  if CompWordsContainsArray "${cmds704[@]}"; then _picocli_fcli_util_allcommands; return $?; fi
  if CompWordsContainsArray "${cmds703[@]}"; then _picocli_fcli_license_ncdreport_createconfig; return $?; fi
  if CompWordsContainsArray "${cmds702[@]}"; then _picocli_fcli_license_ncdreport_create; return $?; fi
  if CompWordsContainsArray "${cmds701[@]}"; then _picocli_fcli_license_mspreport_createconfig; return $?; fi
  if CompWordsContainsArray "${cmds700[@]}"; then _picocli_fcli_license_mspreport_create; return $?; fi
  if CompWordsContainsArray "${cmds699[@]}"; then _picocli_fcli_license_ncdreport; return $?; fi
  if CompWordsContainsArray "${cmds698[@]}"; then _picocli_fcli_license_mspreport; return $?; fi
  if CompWordsContainsArray "${cmds697[@]}"; then _picocli_fcli_tool_definitions_reset; return $?; fi
  if CompWordsContainsArray "${cmds696[@]}"; then _picocli_fcli_tool_definitions_update; return $?; fi
  if CompWordsContainsArray "${cmds695[@]}"; then _picocli_fcli_tool_definitions_ls; return $?; fi
  if CompWordsContainsArray "${cmds694[@]}"; then _picocli_fcli_tool_definitions_list; return $?; fi
  if CompWordsContainsArray "${cmds693[@]}"; then _picocli_fcli_tool_fve_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds692[@]}"; then _picocli_fcli_tool_fve_run; return $?; fi
  if CompWordsContainsArray "${cmds691[@]}"; then _picocli_fcli_tool_fve_lsp; return $?; fi
  if CompWordsContainsArray "${cmds690[@]}"; then _picocli_fcli_tool_fve_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds689[@]}"; then _picocli_fcli_tool_fve_ls; return $?; fi
  if CompWordsContainsArray "${cmds688[@]}"; then _picocli_fcli_tool_fve_list; return $?; fi
  if CompWordsContainsArray "${cmds687[@]}"; then _picocli_fcli_tool_fve_install; return $?; fi
  if CompWordsContainsArray "${cmds686[@]}"; then _picocli_fcli_tool_vulnexporter_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds685[@]}"; then _picocli_fcli_tool_vulnexporter_run; return $?; fi
  if CompWordsContainsArray "${cmds684[@]}"; then _picocli_fcli_tool_vulnexporter_lsp; return $?; fi
  if CompWordsContainsArray "${cmds683[@]}"; then _picocli_fcli_tool_vulnexporter_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds682[@]}"; then _picocli_fcli_tool_vulnexporter_ls; return $?; fi
  if CompWordsContainsArray "${cmds681[@]}"; then _picocli_fcli_tool_vulnexporter_list; return $?; fi
  if CompWordsContainsArray "${cmds680[@]}"; then _picocli_fcli_tool_vulnexporter_install; return $?; fi
  if CompWordsContainsArray "${cmds679[@]}"; then _picocli_fcli_tool_scancentralclient_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds678[@]}"; then _picocli_fcli_tool_scancentralclient_run; return $?; fi
  if CompWordsContainsArray "${cmds677[@]}"; then _picocli_fcli_tool_scancentralclient_lsp; return $?; fi
  if CompWordsContainsArray "${cmds676[@]}"; then _picocli_fcli_tool_scancentralclient_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds675[@]}"; then _picocli_fcli_tool_scancentralclient_ls; return $?; fi
  if CompWordsContainsArray "${cmds674[@]}"; then _picocli_fcli_tool_scancentralclient_list; return $?; fi
  if CompWordsContainsArray "${cmds673[@]}"; then _picocli_fcli_tool_scancentralclient_install; return $?; fi
  if CompWordsContainsArray "${cmds672[@]}"; then _picocli_fcli_tool_scclient_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds671[@]}"; then _picocli_fcli_tool_scclient_run; return $?; fi
  if CompWordsContainsArray "${cmds670[@]}"; then _picocli_fcli_tool_scclient_lsp; return $?; fi
  if CompWordsContainsArray "${cmds669[@]}"; then _picocli_fcli_tool_scclient_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds668[@]}"; then _picocli_fcli_tool_scclient_ls; return $?; fi
  if CompWordsContainsArray "${cmds667[@]}"; then _picocli_fcli_tool_scclient_list; return $?; fi
  if CompWordsContainsArray "${cmds666[@]}"; then _picocli_fcli_tool_scclient_install; return $?; fi
  if CompWordsContainsArray "${cmds665[@]}"; then _picocli_fcli_tool_fodupload_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds664[@]}"; then _picocli_fcli_tool_fodupload_run; return $?; fi
  if CompWordsContainsArray "${cmds663[@]}"; then _picocli_fcli_tool_fodupload_lsp; return $?; fi
  if CompWordsContainsArray "${cmds662[@]}"; then _picocli_fcli_tool_fodupload_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds661[@]}"; then _picocli_fcli_tool_fodupload_ls; return $?; fi
  if CompWordsContainsArray "${cmds660[@]}"; then _picocli_fcli_tool_fodupload_list; return $?; fi
  if CompWordsContainsArray "${cmds659[@]}"; then _picocli_fcli_tool_fodupload_install; return $?; fi
  if CompWordsContainsArray "${cmds658[@]}"; then _picocli_fcli_tool_foduploader_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds657[@]}"; then _picocli_fcli_tool_foduploader_run; return $?; fi
  if CompWordsContainsArray "${cmds656[@]}"; then _picocli_fcli_tool_foduploader_lsp; return $?; fi
  if CompWordsContainsArray "${cmds655[@]}"; then _picocli_fcli_tool_foduploader_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds654[@]}"; then _picocli_fcli_tool_foduploader_ls; return $?; fi
  if CompWordsContainsArray "${cmds653[@]}"; then _picocli_fcli_tool_foduploader_list; return $?; fi
  if CompWordsContainsArray "${cmds652[@]}"; then _picocli_fcli_tool_foduploader_install; return $?; fi
  if CompWordsContainsArray "${cmds651[@]}"; then _picocli_fcli_tool_fcli_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds650[@]}"; then _picocli_fcli_tool_fcli_run; return $?; fi
  if CompWordsContainsArray "${cmds649[@]}"; then _picocli_fcli_tool_fcli_lsp; return $?; fi
  if CompWordsContainsArray "${cmds648[@]}"; then _picocli_fcli_tool_fcli_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds647[@]}"; then _picocli_fcli_tool_fcli_ls; return $?; fi
  if CompWordsContainsArray "${cmds646[@]}"; then _picocli_fcli_tool_fcli_list; return $?; fi
  if CompWordsContainsArray "${cmds645[@]}"; then _picocli_fcli_tool_fcli_install; return $?; fi
  if CompWordsContainsArray "${cmds644[@]}"; then _picocli_fcli_tool_dcli_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds643[@]}"; then _picocli_fcli_tool_dcli_run; return $?; fi
  if CompWordsContainsArray "${cmds642[@]}"; then _picocli_fcli_tool_dcli_lsp; return $?; fi
  if CompWordsContainsArray "${cmds641[@]}"; then _picocli_fcli_tool_dcli_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds640[@]}"; then _picocli_fcli_tool_dcli_ls; return $?; fi
  if CompWordsContainsArray "${cmds639[@]}"; then _picocli_fcli_tool_dcli_list; return $?; fi
  if CompWordsContainsArray "${cmds638[@]}"; then _picocli_fcli_tool_dcli_install; return $?; fi
  if CompWordsContainsArray "${cmds637[@]}"; then _picocli_fcli_tool_debrickedcli_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds636[@]}"; then _picocli_fcli_tool_debrickedcli_run; return $?; fi
  if CompWordsContainsArray "${cmds635[@]}"; then _picocli_fcli_tool_debrickedcli_lsp; return $?; fi
  if CompWordsContainsArray "${cmds634[@]}"; then _picocli_fcli_tool_debrickedcli_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds633[@]}"; then _picocli_fcli_tool_debrickedcli_ls; return $?; fi
  if CompWordsContainsArray "${cmds632[@]}"; then _picocli_fcli_tool_debrickedcli_list; return $?; fi
  if CompWordsContainsArray "${cmds631[@]}"; then _picocli_fcli_tool_debrickedcli_install; return $?; fi
  if CompWordsContainsArray "${cmds630[@]}"; then _picocli_fcli_tool_fbtu_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds629[@]}"; then _picocli_fcli_tool_fbtu_run; return $?; fi
  if CompWordsContainsArray "${cmds628[@]}"; then _picocli_fcli_tool_fbtu_lsp; return $?; fi
  if CompWordsContainsArray "${cmds627[@]}"; then _picocli_fcli_tool_fbtu_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds626[@]}"; then _picocli_fcli_tool_fbtu_ls; return $?; fi
  if CompWordsContainsArray "${cmds625[@]}"; then _picocli_fcli_tool_fbtu_list; return $?; fi
  if CompWordsContainsArray "${cmds624[@]}"; then _picocli_fcli_tool_fbtu_install; return $?; fi
  if CompWordsContainsArray "${cmds623[@]}"; then _picocli_fcli_tool_bugtrackerutility_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds622[@]}"; then _picocli_fcli_tool_bugtrackerutility_run; return $?; fi
  if CompWordsContainsArray "${cmds621[@]}"; then _picocli_fcli_tool_bugtrackerutility_lsp; return $?; fi
  if CompWordsContainsArray "${cmds620[@]}"; then _picocli_fcli_tool_bugtrackerutility_listplatforms; return $?; fi
  if CompWordsContainsArray "${cmds619[@]}"; then _picocli_fcli_tool_bugtrackerutility_ls; return $?; fi
  if CompWordsContainsArray "${cmds618[@]}"; then _picocli_fcli_tool_bugtrackerutility_list; return $?; fi
  if CompWordsContainsArray "${cmds617[@]}"; then _picocli_fcli_tool_bugtrackerutility_install; return $?; fi
  if CompWordsContainsArray "${cmds616[@]}"; then _picocli_fcli_tool_definitions; return $?; fi
  if CompWordsContainsArray "${cmds615[@]}"; then _picocli_fcli_tool_fve; return $?; fi
  if CompWordsContainsArray "${cmds614[@]}"; then _picocli_fcli_tool_vulnexporter; return $?; fi
  if CompWordsContainsArray "${cmds613[@]}"; then _picocli_fcli_tool_scancentralclient; return $?; fi
  if CompWordsContainsArray "${cmds612[@]}"; then _picocli_fcli_tool_scclient; return $?; fi
  if CompWordsContainsArray "${cmds611[@]}"; then _picocli_fcli_tool_fodupload; return $?; fi
  if CompWordsContainsArray "${cmds610[@]}"; then _picocli_fcli_tool_foduploader; return $?; fi
  if CompWordsContainsArray "${cmds609[@]}"; then _picocli_fcli_tool_fcli; return $?; fi
  if CompWordsContainsArray "${cmds608[@]}"; then _picocli_fcli_tool_dcli; return $?; fi
  if CompWordsContainsArray "${cmds607[@]}"; then _picocli_fcli_tool_debrickedcli; return $?; fi
  if CompWordsContainsArray "${cmds606[@]}"; then _picocli_fcli_tool_fbtu; return $?; fi
  if CompWordsContainsArray "${cmds605[@]}"; then _picocli_fcli_tool_bugtrackerutility; return $?; fi
  if CompWordsContainsArray "${cmds604[@]}"; then _picocli_fcli_ssc_rest_call; return $?; fi
  if CompWordsContainsArray "${cmds603[@]}"; then _picocli_fcli_ssc_state_waitforjob; return $?; fi
  if CompWordsContainsArray "${cmds602[@]}"; then _picocli_fcli_ssc_state_updatejob; return $?; fi
  if CompWordsContainsArray "${cmds601[@]}"; then _picocli_fcli_ssc_state_lsj; return $?; fi
  if CompWordsContainsArray "${cmds600[@]}"; then _picocli_fcli_ssc_state_listjobs; return $?; fi
  if CompWordsContainsArray "${cmds599[@]}"; then _picocli_fcli_ssc_state_getjob; return $?; fi
  if CompWordsContainsArray "${cmds598[@]}"; then _picocli_fcli_ssc_state_canceljob; return $?; fi
  if CompWordsContainsArray "${cmds597[@]}"; then _picocli_fcli_ssc_state_lsr; return $?; fi
  if CompWordsContainsArray "${cmds596[@]}"; then _picocli_fcli_ssc_state_listrulepacks; return $?; fi
  if CompWordsContainsArray "${cmds595[@]}"; then _picocli_fcli_ssc_state_uploadseedbundle; return $?; fi
  if CompWordsContainsArray "${cmds594[@]}"; then _picocli_fcli_ssc_state_lss; return $?; fi
  if CompWordsContainsArray "${cmds593[@]}"; then _picocli_fcli_ssc_state_listsettings; return $?; fi
  if CompWordsContainsArray "${cmds592[@]}"; then _picocli_fcli_ssc_state_lse; return $?; fi
  if CompWordsContainsArray "${cmds591[@]}"; then _picocli_fcli_ssc_state_listevents; return $?; fi
  if CompWordsContainsArray "${cmds590[@]}"; then _picocli_fcli_ssc_state_lsa; return $?; fi
  if CompWordsContainsArray "${cmds589[@]}"; then _picocli_fcli_ssc_state_listactivities; return $?; fi
  if CompWordsContainsArray "${cmds588[@]}"; then _picocli_fcli_ssc_systemstate_waitforjob; return $?; fi
  if CompWordsContainsArray "${cmds587[@]}"; then _picocli_fcli_ssc_systemstate_updatejob; return $?; fi
  if CompWordsContainsArray "${cmds586[@]}"; then _picocli_fcli_ssc_systemstate_lsj; return $?; fi
  if CompWordsContainsArray "${cmds585[@]}"; then _picocli_fcli_ssc_systemstate_listjobs; return $?; fi
  if CompWordsContainsArray "${cmds584[@]}"; then _picocli_fcli_ssc_systemstate_getjob; return $?; fi
  if CompWordsContainsArray "${cmds583[@]}"; then _picocli_fcli_ssc_systemstate_canceljob; return $?; fi
  if CompWordsContainsArray "${cmds582[@]}"; then _picocli_fcli_ssc_systemstate_lsr; return $?; fi
  if CompWordsContainsArray "${cmds581[@]}"; then _picocli_fcli_ssc_systemstate_listrulepacks; return $?; fi
  if CompWordsContainsArray "${cmds580[@]}"; then _picocli_fcli_ssc_systemstate_uploadseedbundle; return $?; fi
  if CompWordsContainsArray "${cmds579[@]}"; then _picocli_fcli_ssc_systemstate_lss; return $?; fi
  if CompWordsContainsArray "${cmds578[@]}"; then _picocli_fcli_ssc_systemstate_listsettings; return $?; fi
  if CompWordsContainsArray "${cmds577[@]}"; then _picocli_fcli_ssc_systemstate_lse; return $?; fi
  if CompWordsContainsArray "${cmds576[@]}"; then _picocli_fcli_ssc_systemstate_listevents; return $?; fi
  if CompWordsContainsArray "${cmds575[@]}"; then _picocli_fcli_ssc_systemstate_lsa; return $?; fi
  if CompWordsContainsArray "${cmds574[@]}"; then _picocli_fcli_ssc_systemstate_listactivities; return $?; fi
  if CompWordsContainsArray "${cmds573[@]}"; then _picocli_fcli_ssc_report_rmt; return $?; fi
  if CompWordsContainsArray "${cmds572[@]}"; then _picocli_fcli_ssc_report_deletetemplate; return $?; fi
  if CompWordsContainsArray "${cmds571[@]}"; then _picocli_fcli_ssc_report_createtemplateconfig; return $?; fi
  if CompWordsContainsArray "${cmds570[@]}"; then _picocli_fcli_ssc_report_downloadtemplate; return $?; fi
  if CompWordsContainsArray "${cmds569[@]}"; then _picocli_fcli_ssc_report_gettemplate; return $?; fi
  if CompWordsContainsArray "${cmds568[@]}"; then _picocli_fcli_ssc_report_lst; return $?; fi
  if CompWordsContainsArray "${cmds567[@]}"; then _picocli_fcli_ssc_report_listtemplates; return $?; fi
  if CompWordsContainsArray "${cmds566[@]}"; then _picocli_fcli_ssc_report_createtemplate; return $?; fi
  if CompWordsContainsArray "${cmds565[@]}"; then _picocli_fcli_ssc_report_lsp; return $?; fi
  if CompWordsContainsArray "${cmds564[@]}"; then _picocli_fcli_ssc_report_listparameters; return $?; fi
  if CompWordsContainsArray "${cmds563[@]}"; then _picocli_fcli_ssc_report_rm; return $?; fi
  if CompWordsContainsArray "${cmds562[@]}"; then _picocli_fcli_ssc_report_delete; return $?; fi
  if CompWordsContainsArray "${cmds561[@]}"; then _picocli_fcli_ssc_report_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds560[@]}"; then _picocli_fcli_ssc_report_download; return $?; fi
  if CompWordsContainsArray "${cmds559[@]}"; then _picocli_fcli_ssc_report_get; return $?; fi
  if CompWordsContainsArray "${cmds558[@]}"; then _picocli_fcli_ssc_report_ls; return $?; fi
  if CompWordsContainsArray "${cmds557[@]}"; then _picocli_fcli_ssc_report_list; return $?; fi
  if CompWordsContainsArray "${cmds556[@]}"; then _picocli_fcli_ssc_report_create; return $?; fi
  if CompWordsContainsArray "${cmds555[@]}"; then _picocli_fcli_ssc_plugin_ls; return $?; fi
  if CompWordsContainsArray "${cmds554[@]}"; then _picocli_fcli_ssc_plugin_list; return $?; fi
  if CompWordsContainsArray "${cmds553[@]}"; then _picocli_fcli_ssc_plugin_get; return $?; fi
  if CompWordsContainsArray "${cmds552[@]}"; then _picocli_fcli_ssc_plugin_disable; return $?; fi
  if CompWordsContainsArray "${cmds551[@]}"; then _picocli_fcli_ssc_plugin_enable; return $?; fi
  if CompWordsContainsArray "${cmds550[@]}"; then _picocli_fcli_ssc_plugin_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds549[@]}"; then _picocli_fcli_ssc_plugin_install; return $?; fi
  if CompWordsContainsArray "${cmds548[@]}"; then _picocli_fcli_ssc_var_ls; return $?; fi
  if CompWordsContainsArray "${cmds547[@]}"; then _picocli_fcli_ssc_var_list; return $?; fi
  if CompWordsContainsArray "${cmds546[@]}"; then _picocli_fcli_ssc_var_get; return $?; fi
  if CompWordsContainsArray "${cmds545[@]}"; then _picocli_fcli_ssc_var_lsd; return $?; fi
  if CompWordsContainsArray "${cmds544[@]}"; then _picocli_fcli_ssc_var_listdefinitions; return $?; fi
  if CompWordsContainsArray "${cmds543[@]}"; then _picocli_fcli_ssc_variable_ls; return $?; fi
  if CompWordsContainsArray "${cmds542[@]}"; then _picocli_fcli_ssc_variable_list; return $?; fi
  if CompWordsContainsArray "${cmds541[@]}"; then _picocli_fcli_ssc_variable_get; return $?; fi
  if CompWordsContainsArray "${cmds540[@]}"; then _picocli_fcli_ssc_variable_lsd; return $?; fi
  if CompWordsContainsArray "${cmds539[@]}"; then _picocli_fcli_ssc_variable_listdefinitions; return $?; fi
  if CompWordsContainsArray "${cmds538[@]}"; then _picocli_fcli_ssc_pi_ls; return $?; fi
  if CompWordsContainsArray "${cmds537[@]}"; then _picocli_fcli_ssc_pi_list; return $?; fi
  if CompWordsContainsArray "${cmds536[@]}"; then _picocli_fcli_ssc_pi_get; return $?; fi
  if CompWordsContainsArray "${cmds535[@]}"; then _picocli_fcli_ssc_pi_lsd; return $?; fi
  if CompWordsContainsArray "${cmds534[@]}"; then _picocli_fcli_ssc_pi_listdefinitions; return $?; fi
  if CompWordsContainsArray "${cmds533[@]}"; then _picocli_fcli_ssc_performanceindicator_ls; return $?; fi
  if CompWordsContainsArray "${cmds532[@]}"; then _picocli_fcli_ssc_performanceindicator_list; return $?; fi
  if CompWordsContainsArray "${cmds531[@]}"; then _picocli_fcli_ssc_performanceindicator_get; return $?; fi
  if CompWordsContainsArray "${cmds530[@]}"; then _picocli_fcli_ssc_performanceindicator_lsd; return $?; fi
  if CompWordsContainsArray "${cmds529[@]}"; then _picocli_fcli_ssc_performanceindicator_listdefinitions; return $?; fi
  if CompWordsContainsArray "${cmds528[@]}"; then _picocli_fcli_ssc_issue_ls; return $?; fi
  if CompWordsContainsArray "${cmds527[@]}"; then _picocli_fcli_ssc_issue_list; return $?; fi
  if CompWordsContainsArray "${cmds526[@]}"; then _picocli_fcli_ssc_issue_count; return $?; fi
  if CompWordsContainsArray "${cmds525[@]}"; then _picocli_fcli_ssc_issue_lsg; return $?; fi
  if CompWordsContainsArray "${cmds524[@]}"; then _picocli_fcli_ssc_issue_listgroups; return $?; fi
  if CompWordsContainsArray "${cmds523[@]}"; then _picocli_fcli_ssc_issue_getgroup; return $?; fi
  if CompWordsContainsArray "${cmds522[@]}"; then _picocli_fcli_ssc_issue_lsf; return $?; fi
  if CompWordsContainsArray "${cmds521[@]}"; then _picocli_fcli_ssc_issue_listfilters; return $?; fi
  if CompWordsContainsArray "${cmds520[@]}"; then _picocli_fcli_ssc_issue_getfilter; return $?; fi
  if CompWordsContainsArray "${cmds519[@]}"; then _picocli_fcli_ssc_issue_lsfs; return $?; fi
  if CompWordsContainsArray "${cmds518[@]}"; then _picocli_fcli_ssc_issue_listfiltersets; return $?; fi
  if CompWordsContainsArray "${cmds517[@]}"; then _picocli_fcli_ssc_issue_getfilterset; return $?; fi
  if CompWordsContainsArray "${cmds516[@]}"; then _picocli_fcli_ssc_issue_updatetemplate; return $?; fi
  if CompWordsContainsArray "${cmds515[@]}"; then _picocli_fcli_ssc_issue_lst; return $?; fi
  if CompWordsContainsArray "${cmds514[@]}"; then _picocli_fcli_ssc_issue_listtemplates; return $?; fi
  if CompWordsContainsArray "${cmds513[@]}"; then _picocli_fcli_ssc_issue_gettemplate; return $?; fi
  if CompWordsContainsArray "${cmds512[@]}"; then _picocli_fcli_ssc_issue_downloadtemplate; return $?; fi
  if CompWordsContainsArray "${cmds511[@]}"; then _picocli_fcli_ssc_issue_rmt; return $?; fi
  if CompWordsContainsArray "${cmds510[@]}"; then _picocli_fcli_ssc_issue_deletetemplate; return $?; fi
  if CompWordsContainsArray "${cmds509[@]}"; then _picocli_fcli_ssc_issue_createtemplate; return $?; fi
  if CompWordsContainsArray "${cmds508[@]}"; then _picocli_fcli_ssc_attr_update; return $?; fi
  if CompWordsContainsArray "${cmds507[@]}"; then _picocli_fcli_ssc_attr_ls; return $?; fi
  if CompWordsContainsArray "${cmds506[@]}"; then _picocli_fcli_ssc_attr_list; return $?; fi
  if CompWordsContainsArray "${cmds505[@]}"; then _picocli_fcli_ssc_attr_lsd; return $?; fi
  if CompWordsContainsArray "${cmds504[@]}"; then _picocli_fcli_ssc_attr_listdefinitions; return $?; fi
  if CompWordsContainsArray "${cmds503[@]}"; then _picocli_fcli_ssc_attr_getdefinition; return $?; fi
  if CompWordsContainsArray "${cmds502[@]}"; then _picocli_fcli_ssc_attribute_update; return $?; fi
  if CompWordsContainsArray "${cmds501[@]}"; then _picocli_fcli_ssc_attribute_ls; return $?; fi
  if CompWordsContainsArray "${cmds500[@]}"; then _picocli_fcli_ssc_attribute_list; return $?; fi
  if CompWordsContainsArray "${cmds499[@]}"; then _picocli_fcli_ssc_attribute_lsd; return $?; fi
  if CompWordsContainsArray "${cmds498[@]}"; then _picocli_fcli_ssc_attribute_listdefinitions; return $?; fi
  if CompWordsContainsArray "${cmds497[@]}"; then _picocli_fcli_ssc_attribute_getdefinition; return $?; fi
  if CompWordsContainsArray "${cmds496[@]}"; then _picocli_fcli_ssc_artifact_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds495[@]}"; then _picocli_fcli_ssc_artifact_upload; return $?; fi
  if CompWordsContainsArray "${cmds494[@]}"; then _picocli_fcli_ssc_artifact_purge; return $?; fi
  if CompWordsContainsArray "${cmds493[@]}"; then _picocli_fcli_ssc_artifact_ls; return $?; fi
  if CompWordsContainsArray "${cmds492[@]}"; then _picocli_fcli_ssc_artifact_list; return $?; fi
  if CompWordsContainsArray "${cmds491[@]}"; then _picocli_fcli_ssc_artifact_importdebricked; return $?; fi
  if CompWordsContainsArray "${cmds490[@]}"; then _picocli_fcli_ssc_artifact_get; return $?; fi
  if CompWordsContainsArray "${cmds489[@]}"; then _picocli_fcli_ssc_artifact_download; return $?; fi
  if CompWordsContainsArray "${cmds488[@]}"; then _picocli_fcli_ssc_artifact_rm; return $?; fi
  if CompWordsContainsArray "${cmds487[@]}"; then _picocli_fcli_ssc_artifact_delete; return $?; fi
  if CompWordsContainsArray "${cmds486[@]}"; then _picocli_fcli_ssc_artifact_approve; return $?; fi
  if CompWordsContainsArray "${cmds485[@]}"; then _picocli_fcli_ssc_av_update; return $?; fi
  if CompWordsContainsArray "${cmds484[@]}"; then _picocli_fcli_ssc_av_refreshmetrics; return $?; fi
  if CompWordsContainsArray "${cmds483[@]}"; then _picocli_fcli_ssc_av_purgeartifacts; return $?; fi
  if CompWordsContainsArray "${cmds482[@]}"; then _picocli_fcli_ssc_av_ls; return $?; fi
  if CompWordsContainsArray "${cmds481[@]}"; then _picocli_fcli_ssc_av_list; return $?; fi
  if CompWordsContainsArray "${cmds480[@]}"; then _picocli_fcli_ssc_av_get; return $?; fi
  if CompWordsContainsArray "${cmds479[@]}"; then _picocli_fcli_ssc_av_downloadstate; return $?; fi
  if CompWordsContainsArray "${cmds478[@]}"; then _picocli_fcli_ssc_av_copystate; return $?; fi
  if CompWordsContainsArray "${cmds477[@]}"; then _picocli_fcli_ssc_av_rm; return $?; fi
  if CompWordsContainsArray "${cmds476[@]}"; then _picocli_fcli_ssc_av_delete; return $?; fi
  if CompWordsContainsArray "${cmds475[@]}"; then _picocli_fcli_ssc_av_create; return $?; fi
  if CompWordsContainsArray "${cmds474[@]}"; then _picocli_fcli_ssc_appversion_update; return $?; fi
  if CompWordsContainsArray "${cmds473[@]}"; then _picocli_fcli_ssc_appversion_refreshmetrics; return $?; fi
  if CompWordsContainsArray "${cmds472[@]}"; then _picocli_fcli_ssc_appversion_purgeartifacts; return $?; fi
  if CompWordsContainsArray "${cmds471[@]}"; then _picocli_fcli_ssc_appversion_ls; return $?; fi
  if CompWordsContainsArray "${cmds470[@]}"; then _picocli_fcli_ssc_appversion_list; return $?; fi
  if CompWordsContainsArray "${cmds469[@]}"; then _picocli_fcli_ssc_appversion_get; return $?; fi
  if CompWordsContainsArray "${cmds468[@]}"; then _picocli_fcli_ssc_appversion_downloadstate; return $?; fi
  if CompWordsContainsArray "${cmds467[@]}"; then _picocli_fcli_ssc_appversion_copystate; return $?; fi
  if CompWordsContainsArray "${cmds466[@]}"; then _picocli_fcli_ssc_appversion_rm; return $?; fi
  if CompWordsContainsArray "${cmds465[@]}"; then _picocli_fcli_ssc_appversion_delete; return $?; fi
  if CompWordsContainsArray "${cmds464[@]}"; then _picocli_fcli_ssc_appversion_create; return $?; fi
  if CompWordsContainsArray "${cmds463[@]}"; then _picocli_fcli_ssc_app_update; return $?; fi
  if CompWordsContainsArray "${cmds462[@]}"; then _picocli_fcli_ssc_app_ls; return $?; fi
  if CompWordsContainsArray "${cmds461[@]}"; then _picocli_fcli_ssc_app_list; return $?; fi
  if CompWordsContainsArray "${cmds460[@]}"; then _picocli_fcli_ssc_app_get; return $?; fi
  if CompWordsContainsArray "${cmds459[@]}"; then _picocli_fcli_ssc_app_rm; return $?; fi
  if CompWordsContainsArray "${cmds458[@]}"; then _picocli_fcli_ssc_app_delete; return $?; fi
  if CompWordsContainsArray "${cmds457[@]}"; then _picocli_fcli_ssc_alert_ls; return $?; fi
  if CompWordsContainsArray "${cmds456[@]}"; then _picocli_fcli_ssc_alert_list; return $?; fi
  if CompWordsContainsArray "${cmds455[@]}"; then _picocli_fcli_ssc_alert_lsd; return $?; fi
  if CompWordsContainsArray "${cmds454[@]}"; then _picocli_fcli_ssc_alert_listdefinitions; return $?; fi
  if CompWordsContainsArray "${cmds453[@]}"; then _picocli_fcli_ssc_alert_getdefinition; return $?; fi
  if CompWordsContainsArray "${cmds452[@]}"; then _picocli_fcli_ssc_ac_lsavu; return $?; fi
  if CompWordsContainsArray "${cmds451[@]}"; then _picocli_fcli_ssc_ac_listappversionusers; return $?; fi
  if CompWordsContainsArray "${cmds450[@]}"; then _picocli_fcli_ssc_ac_lsu; return $?; fi
  if CompWordsContainsArray "${cmds449[@]}"; then _picocli_fcli_ssc_ac_listusers; return $?; fi
  if CompWordsContainsArray "${cmds448[@]}"; then _picocli_fcli_ssc_ac_getuser; return $?; fi
  if CompWordsContainsArray "${cmds447[@]}"; then _picocli_fcli_ssc_ac_rmuser; return $?; fi
  if CompWordsContainsArray "${cmds446[@]}"; then _picocli_fcli_ssc_ac_deleteuser; return $?; fi
  if CompWordsContainsArray "${cmds445[@]}"; then _picocli_fcli_ssc_ac_createlocaluser; return $?; fi
  if CompWordsContainsArray "${cmds444[@]}"; then _picocli_fcli_ssc_ac_lsp; return $?; fi
  if CompWordsContainsArray "${cmds443[@]}"; then _picocli_fcli_ssc_ac_listpermissions; return $?; fi
  if CompWordsContainsArray "${cmds442[@]}"; then _picocli_fcli_ssc_ac_getpermission; return $?; fi
  if CompWordsContainsArray "${cmds441[@]}"; then _picocli_fcli_ssc_ac_lsr; return $?; fi
  if CompWordsContainsArray "${cmds440[@]}"; then _picocli_fcli_ssc_ac_listroles; return $?; fi
  if CompWordsContainsArray "${cmds439[@]}"; then _picocli_fcli_ssc_ac_getrole; return $?; fi
  if CompWordsContainsArray "${cmds438[@]}"; then _picocli_fcli_ssc_ac_rmrole; return $?; fi
  if CompWordsContainsArray "${cmds437[@]}"; then _picocli_fcli_ssc_ac_deleterole; return $?; fi
  if CompWordsContainsArray "${cmds436[@]}"; then _picocli_fcli_ssc_ac_createrole; return $?; fi
  if CompWordsContainsArray "${cmds435[@]}"; then _picocli_fcli_ssc_ac_updatetoken; return $?; fi
  if CompWordsContainsArray "${cmds434[@]}"; then _picocli_fcli_ssc_ac_revoketoken; return $?; fi
  if CompWordsContainsArray "${cmds433[@]}"; then _picocli_fcli_ssc_ac_lst; return $?; fi
  if CompWordsContainsArray "${cmds432[@]}"; then _picocli_fcli_ssc_ac_listtokens; return $?; fi
  if CompWordsContainsArray "${cmds431[@]}"; then _picocli_fcli_ssc_ac_createtoken; return $?; fi
  if CompWordsContainsArray "${cmds430[@]}"; then _picocli_fcli_ssc_ac_lstd; return $?; fi
  if CompWordsContainsArray "${cmds429[@]}"; then _picocli_fcli_ssc_ac_listtokendefinitions; return $?; fi
  if CompWordsContainsArray "${cmds428[@]}"; then _picocli_fcli_ssc_accesscontrol_lsavu; return $?; fi
  if CompWordsContainsArray "${cmds427[@]}"; then _picocli_fcli_ssc_accesscontrol_listappversionusers; return $?; fi
  if CompWordsContainsArray "${cmds426[@]}"; then _picocli_fcli_ssc_accesscontrol_lsu; return $?; fi
  if CompWordsContainsArray "${cmds425[@]}"; then _picocli_fcli_ssc_accesscontrol_listusers; return $?; fi
  if CompWordsContainsArray "${cmds424[@]}"; then _picocli_fcli_ssc_accesscontrol_getuser; return $?; fi
  if CompWordsContainsArray "${cmds423[@]}"; then _picocli_fcli_ssc_accesscontrol_rmuser; return $?; fi
  if CompWordsContainsArray "${cmds422[@]}"; then _picocli_fcli_ssc_accesscontrol_deleteuser; return $?; fi
  if CompWordsContainsArray "${cmds421[@]}"; then _picocli_fcli_ssc_accesscontrol_createlocaluser; return $?; fi
  if CompWordsContainsArray "${cmds420[@]}"; then _picocli_fcli_ssc_accesscontrol_lsp; return $?; fi
  if CompWordsContainsArray "${cmds419[@]}"; then _picocli_fcli_ssc_accesscontrol_listpermissions; return $?; fi
  if CompWordsContainsArray "${cmds418[@]}"; then _picocli_fcli_ssc_accesscontrol_getpermission; return $?; fi
  if CompWordsContainsArray "${cmds417[@]}"; then _picocli_fcli_ssc_accesscontrol_lsr; return $?; fi
  if CompWordsContainsArray "${cmds416[@]}"; then _picocli_fcli_ssc_accesscontrol_listroles; return $?; fi
  if CompWordsContainsArray "${cmds415[@]}"; then _picocli_fcli_ssc_accesscontrol_getrole; return $?; fi
  if CompWordsContainsArray "${cmds414[@]}"; then _picocli_fcli_ssc_accesscontrol_rmrole; return $?; fi
  if CompWordsContainsArray "${cmds413[@]}"; then _picocli_fcli_ssc_accesscontrol_deleterole; return $?; fi
  if CompWordsContainsArray "${cmds412[@]}"; then _picocli_fcli_ssc_accesscontrol_createrole; return $?; fi
  if CompWordsContainsArray "${cmds411[@]}"; then _picocli_fcli_ssc_accesscontrol_updatetoken; return $?; fi
  if CompWordsContainsArray "${cmds410[@]}"; then _picocli_fcli_ssc_accesscontrol_revoketoken; return $?; fi
  if CompWordsContainsArray "${cmds409[@]}"; then _picocli_fcli_ssc_accesscontrol_lst; return $?; fi
  if CompWordsContainsArray "${cmds408[@]}"; then _picocli_fcli_ssc_accesscontrol_listtokens; return $?; fi
  if CompWordsContainsArray "${cmds407[@]}"; then _picocli_fcli_ssc_accesscontrol_createtoken; return $?; fi
  if CompWordsContainsArray "${cmds406[@]}"; then _picocli_fcli_ssc_accesscontrol_lstd; return $?; fi
  if CompWordsContainsArray "${cmds405[@]}"; then _picocli_fcli_ssc_accesscontrol_listtokendefinitions; return $?; fi
  if CompWordsContainsArray "${cmds404[@]}"; then _picocli_fcli_ssc_action_sign; return $?; fi
  if CompWordsContainsArray "${cmds403[@]}"; then _picocli_fcli_ssc_action_run; return $?; fi
  if CompWordsContainsArray "${cmds402[@]}"; then _picocli_fcli_ssc_action_reset; return $?; fi
  if CompWordsContainsArray "${cmds401[@]}"; then _picocli_fcli_ssc_action_ls; return $?; fi
  if CompWordsContainsArray "${cmds400[@]}"; then _picocli_fcli_ssc_action_list; return $?; fi
  if CompWordsContainsArray "${cmds399[@]}"; then _picocli_fcli_ssc_action_import; return $?; fi
  if CompWordsContainsArray "${cmds398[@]}"; then _picocli_fcli_ssc_action_help; return $?; fi
  if CompWordsContainsArray "${cmds397[@]}"; then _picocli_fcli_ssc_action_get; return $?; fi
  if CompWordsContainsArray "${cmds396[@]}"; then _picocli_fcli_ssc_session_logout; return $?; fi
  if CompWordsContainsArray "${cmds395[@]}"; then _picocli_fcli_ssc_session_login; return $?; fi
  if CompWordsContainsArray "${cmds394[@]}"; then _picocli_fcli_ssc_session_ls; return $?; fi
  if CompWordsContainsArray "${cmds393[@]}"; then _picocli_fcli_ssc_session_list; return $?; fi
  if CompWordsContainsArray "${cmds392[@]}"; then _picocli_fcli_ssc_rest; return $?; fi
  if CompWordsContainsArray "${cmds391[@]}"; then _picocli_fcli_ssc_state; return $?; fi
  if CompWordsContainsArray "${cmds390[@]}"; then _picocli_fcli_ssc_systemstate; return $?; fi
  if CompWordsContainsArray "${cmds389[@]}"; then _picocli_fcli_ssc_report; return $?; fi
  if CompWordsContainsArray "${cmds388[@]}"; then _picocli_fcli_ssc_plugin; return $?; fi
  if CompWordsContainsArray "${cmds387[@]}"; then _picocli_fcli_ssc_var; return $?; fi
  if CompWordsContainsArray "${cmds386[@]}"; then _picocli_fcli_ssc_variable; return $?; fi
  if CompWordsContainsArray "${cmds385[@]}"; then _picocli_fcli_ssc_pi; return $?; fi
  if CompWordsContainsArray "${cmds384[@]}"; then _picocli_fcli_ssc_performanceindicator; return $?; fi
  if CompWordsContainsArray "${cmds383[@]}"; then _picocli_fcli_ssc_issue; return $?; fi
  if CompWordsContainsArray "${cmds382[@]}"; then _picocli_fcli_ssc_attr; return $?; fi
  if CompWordsContainsArray "${cmds381[@]}"; then _picocli_fcli_ssc_attribute; return $?; fi
  if CompWordsContainsArray "${cmds380[@]}"; then _picocli_fcli_ssc_artifact; return $?; fi
  if CompWordsContainsArray "${cmds379[@]}"; then _picocli_fcli_ssc_av; return $?; fi
  if CompWordsContainsArray "${cmds378[@]}"; then _picocli_fcli_ssc_appversion; return $?; fi
  if CompWordsContainsArray "${cmds377[@]}"; then _picocli_fcli_ssc_app; return $?; fi
  if CompWordsContainsArray "${cmds376[@]}"; then _picocli_fcli_ssc_alert; return $?; fi
  if CompWordsContainsArray "${cmds375[@]}"; then _picocli_fcli_ssc_ac; return $?; fi
  if CompWordsContainsArray "${cmds374[@]}"; then _picocli_fcli_ssc_accesscontrol; return $?; fi
  if CompWordsContainsArray "${cmds373[@]}"; then _picocli_fcli_ssc_action; return $?; fi
  if CompWordsContainsArray "${cmds372[@]}"; then _picocli_fcli_ssc_session; return $?; fi
  if CompWordsContainsArray "${cmds371[@]}"; then _picocli_fcli_scsast_rest_call; return $?; fi
  if CompWordsContainsArray "${cmds370[@]}"; then _picocli_fcli_scsast_pool_ls; return $?; fi
  if CompWordsContainsArray "${cmds369[@]}"; then _picocli_fcli_scsast_pool_list; return $?; fi
  if CompWordsContainsArray "${cmds368[@]}"; then _picocli_fcli_scsast_sensorpool_ls; return $?; fi
  if CompWordsContainsArray "${cmds367[@]}"; then _picocli_fcli_scsast_sensorpool_list; return $?; fi
  if CompWordsContainsArray "${cmds366[@]}"; then _picocli_fcli_scsast_sensor_ls; return $?; fi
  if CompWordsContainsArray "${cmds365[@]}"; then _picocli_fcli_scsast_sensor_list; return $?; fi
  if CompWordsContainsArray "${cmds364[@]}"; then _picocli_fcli_scsast_scan_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds363[@]}"; then _picocli_fcli_scsast_scan_status; return $?; fi
  if CompWordsContainsArray "${cmds362[@]}"; then _picocli_fcli_scsast_scan_start; return $?; fi
  if CompWordsContainsArray "${cmds361[@]}"; then _picocli_fcli_scsast_scan_ls; return $?; fi
  if CompWordsContainsArray "${cmds360[@]}"; then _picocli_fcli_scsast_scan_list; return $?; fi
  if CompWordsContainsArray "${cmds359[@]}"; then _picocli_fcli_scsast_scan_download; return $?; fi
  if CompWordsContainsArray "${cmds358[@]}"; then _picocli_fcli_scsast_scan_cancel; return $?; fi
  if CompWordsContainsArray "${cmds357[@]}"; then _picocli_fcli_scsast_rest; return $?; fi
  if CompWordsContainsArray "${cmds356[@]}"; then _picocli_fcli_scsast_pool; return $?; fi
  if CompWordsContainsArray "${cmds355[@]}"; then _picocli_fcli_scsast_sensorpool; return $?; fi
  if CompWordsContainsArray "${cmds354[@]}"; then _picocli_fcli_scsast_sensor; return $?; fi
  if CompWordsContainsArray "${cmds353[@]}"; then _picocli_fcli_scsast_scan; return $?; fi
  if CompWordsContainsArray "${cmds352[@]}"; then _picocli_fcli_scdast_rest_call; return $?; fi
  if CompWordsContainsArray "${cmds351[@]}"; then _picocli_fcli_scdast_sensor_ls; return $?; fi
  if CompWordsContainsArray "${cmds350[@]}"; then _picocli_fcli_scdast_sensor_list; return $?; fi
  if CompWordsContainsArray "${cmds349[@]}"; then _picocli_fcli_scdast_sensor_get; return $?; fi
  if CompWordsContainsArray "${cmds348[@]}"; then _picocli_fcli_scdast_sensor_enable; return $?; fi
  if CompWordsContainsArray "${cmds347[@]}"; then _picocli_fcli_scdast_sensor_disable; return $?; fi
  if CompWordsContainsArray "${cmds346[@]}"; then _picocli_fcli_scdast_scansettings_ls; return $?; fi
  if CompWordsContainsArray "${cmds345[@]}"; then _picocli_fcli_scdast_scansettings_list; return $?; fi
  if CompWordsContainsArray "${cmds344[@]}"; then _picocli_fcli_scdast_scansettings_get; return $?; fi
  if CompWordsContainsArray "${cmds343[@]}"; then _picocli_fcli_scdast_scanpolicy_ls; return $?; fi
  if CompWordsContainsArray "${cmds342[@]}"; then _picocli_fcli_scdast_scanpolicy_list; return $?; fi
  if CompWordsContainsArray "${cmds341[@]}"; then _picocli_fcli_scdast_scanpolicy_get; return $?; fi
  if CompWordsContainsArray "${cmds340[@]}"; then _picocli_fcli_scdast_scan_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds339[@]}"; then _picocli_fcli_scdast_scan_start; return $?; fi
  if CompWordsContainsArray "${cmds338[@]}"; then _picocli_fcli_scdast_scan_resume; return $?; fi
  if CompWordsContainsArray "${cmds337[@]}"; then _picocli_fcli_scdast_scan_publish; return $?; fi
  if CompWordsContainsArray "${cmds336[@]}"; then _picocli_fcli_scdast_scan_pause; return $?; fi
  if CompWordsContainsArray "${cmds335[@]}"; then _picocli_fcli_scdast_scan_ls; return $?; fi
  if CompWordsContainsArray "${cmds334[@]}"; then _picocli_fcli_scdast_scan_list; return $?; fi
  if CompWordsContainsArray "${cmds333[@]}"; then _picocli_fcli_scdast_scan_importfindings; return $?; fi
  if CompWordsContainsArray "${cmds332[@]}"; then _picocli_fcli_scdast_scan_get; return $?; fi
  if CompWordsContainsArray "${cmds331[@]}"; then _picocli_fcli_scdast_scan_download; return $?; fi
  if CompWordsContainsArray "${cmds330[@]}"; then _picocli_fcli_scdast_scan_rm; return $?; fi
  if CompWordsContainsArray "${cmds329[@]}"; then _picocli_fcli_scdast_scan_delete; return $?; fi
  if CompWordsContainsArray "${cmds328[@]}"; then _picocli_fcli_scdast_scan_complete; return $?; fi
  if CompWordsContainsArray "${cmds327[@]}"; then _picocli_fcli_scdast_rest; return $?; fi
  if CompWordsContainsArray "${cmds326[@]}"; then _picocli_fcli_scdast_sensor; return $?; fi
  if CompWordsContainsArray "${cmds325[@]}"; then _picocli_fcli_scdast_scansettings; return $?; fi
  if CompWordsContainsArray "${cmds324[@]}"; then _picocli_fcli_scdast_scanpolicy; return $?; fi
  if CompWordsContainsArray "${cmds323[@]}"; then _picocli_fcli_scdast_scan; return $?; fi
  if CompWordsContainsArray "${cmds322[@]}"; then _picocli_fcli_fod_rest_lookup; return $?; fi
  if CompWordsContainsArray "${cmds321[@]}"; then _picocli_fcli_fod_rest_call; return $?; fi
  if CompWordsContainsArray "${cmds320[@]}"; then _picocli_fcli_fod_report_lst; return $?; fi
  if CompWordsContainsArray "${cmds319[@]}"; then _picocli_fcli_fod_report_listtemplates; return $?; fi
  if CompWordsContainsArray "${cmds318[@]}"; then _picocli_fcli_fod_report_download; return $?; fi
  if CompWordsContainsArray "${cmds317[@]}"; then _picocli_fcli_fod_report_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds316[@]}"; then _picocli_fcli_fod_report_rm; return $?; fi
  if CompWordsContainsArray "${cmds315[@]}"; then _picocli_fcli_fod_report_delete; return $?; fi
  if CompWordsContainsArray "${cmds314[@]}"; then _picocli_fcli_fod_report_create; return $?; fi
  if CompWordsContainsArray "${cmds313[@]}"; then _picocli_fcli_fod_report_get; return $?; fi
  if CompWordsContainsArray "${cmds312[@]}"; then _picocli_fcli_fod_report_ls; return $?; fi
  if CompWordsContainsArray "${cmds311[@]}"; then _picocli_fcli_fod_report_list; return $?; fi
  if CompWordsContainsArray "${cmds310[@]}"; then _picocli_fcli_fod_issue_update; return $?; fi
  if CompWordsContainsArray "${cmds309[@]}"; then _picocli_fcli_fod_issue_ls; return $?; fi
  if CompWordsContainsArray "${cmds308[@]}"; then _picocli_fcli_fod_issue_list; return $?; fi
  if CompWordsContainsArray "${cmds307[@]}"; then _picocli_fcli_fod_oss_lsc; return $?; fi
  if CompWordsContainsArray "${cmds306[@]}"; then _picocli_fcli_fod_oss_listcomponents; return $?; fi
  if CompWordsContainsArray "${cmds305[@]}"; then _picocli_fcli_fod_oss_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds304[@]}"; then _picocli_fcli_fod_oss_start; return $?; fi
  if CompWordsContainsArray "${cmds303[@]}"; then _picocli_fcli_fod_oss_ls; return $?; fi
  if CompWordsContainsArray "${cmds302[@]}"; then _picocli_fcli_fod_oss_list; return $?; fi
  if CompWordsContainsArray "${cmds301[@]}"; then _picocli_fcli_fod_oss_importdebricked; return $?; fi
  if CompWordsContainsArray "${cmds300[@]}"; then _picocli_fcli_fod_oss_import; return $?; fi
  if CompWordsContainsArray "${cmds299[@]}"; then _picocli_fcli_fod_oss_get; return $?; fi
  if CompWordsContainsArray "${cmds298[@]}"; then _picocli_fcli_fod_oss_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds297[@]}"; then _picocli_fcli_fod_oss_download; return $?; fi
  if CompWordsContainsArray "${cmds296[@]}"; then _picocli_fcli_fod_ossscan_lsc; return $?; fi
  if CompWordsContainsArray "${cmds295[@]}"; then _picocli_fcli_fod_ossscan_listcomponents; return $?; fi
  if CompWordsContainsArray "${cmds294[@]}"; then _picocli_fcli_fod_ossscan_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds293[@]}"; then _picocli_fcli_fod_ossscan_start; return $?; fi
  if CompWordsContainsArray "${cmds292[@]}"; then _picocli_fcli_fod_ossscan_ls; return $?; fi
  if CompWordsContainsArray "${cmds291[@]}"; then _picocli_fcli_fod_ossscan_list; return $?; fi
  if CompWordsContainsArray "${cmds290[@]}"; then _picocli_fcli_fod_ossscan_importdebricked; return $?; fi
  if CompWordsContainsArray "${cmds289[@]}"; then _picocli_fcli_fod_ossscan_import; return $?; fi
  if CompWordsContainsArray "${cmds288[@]}"; then _picocli_fcli_fod_ossscan_get; return $?; fi
  if CompWordsContainsArray "${cmds287[@]}"; then _picocli_fcli_fod_ossscan_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds286[@]}"; then _picocli_fcli_fod_ossscan_download; return $?; fi
  if CompWordsContainsArray "${cmds285[@]}"; then _picocli_fcli_fod_mast_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds284[@]}"; then _picocli_fcli_fod_mast_start; return $?; fi
  if CompWordsContainsArray "${cmds283[@]}"; then _picocli_fcli_fod_mast_setup; return $?; fi
  if CompWordsContainsArray "${cmds282[@]}"; then _picocli_fcli_fod_mast_ls; return $?; fi
  if CompWordsContainsArray "${cmds281[@]}"; then _picocli_fcli_fod_mast_list; return $?; fi
  if CompWordsContainsArray "${cmds280[@]}"; then _picocli_fcli_fod_mast_import; return $?; fi
  if CompWordsContainsArray "${cmds279[@]}"; then _picocli_fcli_fod_mast_getconfig; return $?; fi
  if CompWordsContainsArray "${cmds278[@]}"; then _picocli_fcli_fod_mast_get; return $?; fi
  if CompWordsContainsArray "${cmds277[@]}"; then _picocli_fcli_fod_mast_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds276[@]}"; then _picocli_fcli_fod_mast_download; return $?; fi
  if CompWordsContainsArray "${cmds275[@]}"; then _picocli_fcli_fod_mast_cancel; return $?; fi
  if CompWordsContainsArray "${cmds274[@]}"; then _picocli_fcli_fod_mastscan_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds273[@]}"; then _picocli_fcli_fod_mastscan_start; return $?; fi
  if CompWordsContainsArray "${cmds272[@]}"; then _picocli_fcli_fod_mastscan_setup; return $?; fi
  if CompWordsContainsArray "${cmds271[@]}"; then _picocli_fcli_fod_mastscan_ls; return $?; fi
  if CompWordsContainsArray "${cmds270[@]}"; then _picocli_fcli_fod_mastscan_list; return $?; fi
  if CompWordsContainsArray "${cmds269[@]}"; then _picocli_fcli_fod_mastscan_import; return $?; fi
  if CompWordsContainsArray "${cmds268[@]}"; then _picocli_fcli_fod_mastscan_getconfig; return $?; fi
  if CompWordsContainsArray "${cmds267[@]}"; then _picocli_fcli_fod_mastscan_get; return $?; fi
  if CompWordsContainsArray "${cmds266[@]}"; then _picocli_fcli_fod_mastscan_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds265[@]}"; then _picocli_fcli_fod_mastscan_download; return $?; fi
  if CompWordsContainsArray "${cmds264[@]}"; then _picocli_fcli_fod_mastscan_cancel; return $?; fi
  if CompWordsContainsArray "${cmds263[@]}"; then _picocli_fcli_fod_dast_uploadfile; return $?; fi
  if CompWordsContainsArray "${cmds262[@]}"; then _picocli_fcli_fod_dast_start; return $?; fi
  if CompWordsContainsArray "${cmds261[@]}"; then _picocli_fcli_fod_dast_getconfig; return $?; fi
  if CompWordsContainsArray "${cmds260[@]}"; then _picocli_fcli_fod_dast_setupapi; return $?; fi
  if CompWordsContainsArray "${cmds259[@]}"; then _picocli_fcli_fod_dast_setupworkflow; return $?; fi
  if CompWordsContainsArray "${cmds258[@]}"; then _picocli_fcli_fod_dast_setupwebsite; return $?; fi
  if CompWordsContainsArray "${cmds257[@]}"; then _picocli_fcli_fod_dast_ls; return $?; fi
  if CompWordsContainsArray "${cmds256[@]}"; then _picocli_fcli_fod_dast_list; return $?; fi
  if CompWordsContainsArray "${cmds255[@]}"; then _picocli_fcli_fod_dast_import; return $?; fi
  if CompWordsContainsArray "${cmds254[@]}"; then _picocli_fcli_fod_dast_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds253[@]}"; then _picocli_fcli_fod_dast_download; return $?; fi
  if CompWordsContainsArray "${cmds252[@]}"; then _picocli_fcli_fod_dast_cancel; return $?; fi
  if CompWordsContainsArray "${cmds251[@]}"; then _picocli_fcli_fod_dastscan_uploadfile; return $?; fi
  if CompWordsContainsArray "${cmds250[@]}"; then _picocli_fcli_fod_dastscan_start; return $?; fi
  if CompWordsContainsArray "${cmds249[@]}"; then _picocli_fcli_fod_dastscan_getconfig; return $?; fi
  if CompWordsContainsArray "${cmds248[@]}"; then _picocli_fcli_fod_dastscan_setupapi; return $?; fi
  if CompWordsContainsArray "${cmds247[@]}"; then _picocli_fcli_fod_dastscan_setupworkflow; return $?; fi
  if CompWordsContainsArray "${cmds246[@]}"; then _picocli_fcli_fod_dastscan_setupwebsite; return $?; fi
  if CompWordsContainsArray "${cmds245[@]}"; then _picocli_fcli_fod_dastscan_ls; return $?; fi
  if CompWordsContainsArray "${cmds244[@]}"; then _picocli_fcli_fod_dastscan_list; return $?; fi
  if CompWordsContainsArray "${cmds243[@]}"; then _picocli_fcli_fod_dastscan_import; return $?; fi
  if CompWordsContainsArray "${cmds242[@]}"; then _picocli_fcli_fod_dastscan_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds241[@]}"; then _picocli_fcli_fod_dastscan_download; return $?; fi
  if CompWordsContainsArray "${cmds240[@]}"; then _picocli_fcli_fod_dastscan_cancel; return $?; fi
  if CompWordsContainsArray "${cmds239[@]}"; then _picocli_fcli_fod_sast_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds238[@]}"; then _picocli_fcli_fod_sast_start; return $?; fi
  if CompWordsContainsArray "${cmds237[@]}"; then _picocli_fcli_fod_sast_setup; return $?; fi
  if CompWordsContainsArray "${cmds236[@]}"; then _picocli_fcli_fod_sast_ls; return $?; fi
  if CompWordsContainsArray "${cmds235[@]}"; then _picocli_fcli_fod_sast_list; return $?; fi
  if CompWordsContainsArray "${cmds234[@]}"; then _picocli_fcli_fod_sast_import; return $?; fi
  if CompWordsContainsArray "${cmds233[@]}"; then _picocli_fcli_fod_sast_getconfig; return $?; fi
  if CompWordsContainsArray "${cmds232[@]}"; then _picocli_fcli_fod_sast_get; return $?; fi
  if CompWordsContainsArray "${cmds231[@]}"; then _picocli_fcli_fod_sast_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds230[@]}"; then _picocli_fcli_fod_sast_download; return $?; fi
  if CompWordsContainsArray "${cmds229[@]}"; then _picocli_fcli_fod_sast_cancel; return $?; fi
  if CompWordsContainsArray "${cmds228[@]}"; then _picocli_fcli_fod_sastscan_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds227[@]}"; then _picocli_fcli_fod_sastscan_start; return $?; fi
  if CompWordsContainsArray "${cmds226[@]}"; then _picocli_fcli_fod_sastscan_setup; return $?; fi
  if CompWordsContainsArray "${cmds225[@]}"; then _picocli_fcli_fod_sastscan_ls; return $?; fi
  if CompWordsContainsArray "${cmds224[@]}"; then _picocli_fcli_fod_sastscan_list; return $?; fi
  if CompWordsContainsArray "${cmds223[@]}"; then _picocli_fcli_fod_sastscan_import; return $?; fi
  if CompWordsContainsArray "${cmds222[@]}"; then _picocli_fcli_fod_sastscan_getconfig; return $?; fi
  if CompWordsContainsArray "${cmds221[@]}"; then _picocli_fcli_fod_sastscan_get; return $?; fi
  if CompWordsContainsArray "${cmds220[@]}"; then _picocli_fcli_fod_sastscan_downloadlatest; return $?; fi
  if CompWordsContainsArray "${cmds219[@]}"; then _picocli_fcli_fod_sastscan_download; return $?; fi
  if CompWordsContainsArray "${cmds218[@]}"; then _picocli_fcli_fod_sastscan_cancel; return $?; fi
  if CompWordsContainsArray "${cmds217[@]}"; then _picocli_fcli_fod_rel_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds216[@]}"; then _picocli_fcli_fod_rel_lss; return $?; fi
  if CompWordsContainsArray "${cmds215[@]}"; then _picocli_fcli_fod_rel_listscans; return $?; fi
  if CompWordsContainsArray "${cmds214[@]}"; then _picocli_fcli_fod_rel_lsat; return $?; fi
  if CompWordsContainsArray "${cmds213[@]}"; then _picocli_fcli_fod_rel_listassessmenttypes; return $?; fi
  if CompWordsContainsArray "${cmds212[@]}"; then _picocli_fcli_fod_rel_rm; return $?; fi
  if CompWordsContainsArray "${cmds211[@]}"; then _picocli_fcli_fod_rel_delete; return $?; fi
  if CompWordsContainsArray "${cmds210[@]}"; then _picocli_fcli_fod_rel_update; return $?; fi
  if CompWordsContainsArray "${cmds209[@]}"; then _picocli_fcli_fod_rel_create; return $?; fi
  if CompWordsContainsArray "${cmds208[@]}"; then _picocli_fcli_fod_rel_get; return $?; fi
  if CompWordsContainsArray "${cmds207[@]}"; then _picocli_fcli_fod_rel_ls; return $?; fi
  if CompWordsContainsArray "${cmds206[@]}"; then _picocli_fcli_fod_rel_list; return $?; fi
  if CompWordsContainsArray "${cmds205[@]}"; then _picocli_fcli_fod_release_waitfor; return $?; fi
  if CompWordsContainsArray "${cmds204[@]}"; then _picocli_fcli_fod_release_lss; return $?; fi
  if CompWordsContainsArray "${cmds203[@]}"; then _picocli_fcli_fod_release_listscans; return $?; fi
  if CompWordsContainsArray "${cmds202[@]}"; then _picocli_fcli_fod_release_lsat; return $?; fi
  if CompWordsContainsArray "${cmds201[@]}"; then _picocli_fcli_fod_release_listassessmenttypes; return $?; fi
  if CompWordsContainsArray "${cmds200[@]}"; then _picocli_fcli_fod_release_rm; return $?; fi
  if CompWordsContainsArray "${cmds199[@]}"; then _picocli_fcli_fod_release_delete; return $?; fi
  if CompWordsContainsArray "${cmds198[@]}"; then _picocli_fcli_fod_release_update; return $?; fi
  if CompWordsContainsArray "${cmds197[@]}"; then _picocli_fcli_fod_release_create; return $?; fi
  if CompWordsContainsArray "${cmds196[@]}"; then _picocli_fcli_fod_release_get; return $?; fi
  if CompWordsContainsArray "${cmds195[@]}"; then _picocli_fcli_fod_release_ls; return $?; fi
  if CompWordsContainsArray "${cmds194[@]}"; then _picocli_fcli_fod_release_list; return $?; fi
  if CompWordsContainsArray "${cmds193[@]}"; then _picocli_fcli_fod_ms_rm; return $?; fi
  if CompWordsContainsArray "${cmds192[@]}"; then _picocli_fcli_fod_ms_delete; return $?; fi
  if CompWordsContainsArray "${cmds191[@]}"; then _picocli_fcli_fod_ms_update; return $?; fi
  if CompWordsContainsArray "${cmds190[@]}"; then _picocli_fcli_fod_ms_create; return $?; fi
  if CompWordsContainsArray "${cmds189[@]}"; then _picocli_fcli_fod_ms_ls; return $?; fi
  if CompWordsContainsArray "${cmds188[@]}"; then _picocli_fcli_fod_ms_list; return $?; fi
  if CompWordsContainsArray "${cmds187[@]}"; then _picocli_fcli_fod_microservice_rm; return $?; fi
  if CompWordsContainsArray "${cmds186[@]}"; then _picocli_fcli_fod_microservice_delete; return $?; fi
  if CompWordsContainsArray "${cmds185[@]}"; then _picocli_fcli_fod_microservice_update; return $?; fi
  if CompWordsContainsArray "${cmds184[@]}"; then _picocli_fcli_fod_microservice_create; return $?; fi
  if CompWordsContainsArray "${cmds183[@]}"; then _picocli_fcli_fod_microservice_ls; return $?; fi
  if CompWordsContainsArray "${cmds182[@]}"; then _picocli_fcli_fod_microservice_list; return $?; fi
  if CompWordsContainsArray "${cmds181[@]}"; then _picocli_fcli_fod_app_lss; return $?; fi
  if CompWordsContainsArray "${cmds180[@]}"; then _picocli_fcli_fod_app_listscans; return $?; fi
  if CompWordsContainsArray "${cmds179[@]}"; then _picocli_fcli_fod_app_rm; return $?; fi
  if CompWordsContainsArray "${cmds178[@]}"; then _picocli_fcli_fod_app_delete; return $?; fi
  if CompWordsContainsArray "${cmds177[@]}"; then _picocli_fcli_fod_app_update; return $?; fi
  if CompWordsContainsArray "${cmds176[@]}"; then _picocli_fcli_fod_app_create; return $?; fi
  if CompWordsContainsArray "${cmds175[@]}"; then _picocli_fcli_fod_app_get; return $?; fi
  if CompWordsContainsArray "${cmds174[@]}"; then _picocli_fcli_fod_app_ls; return $?; fi
  if CompWordsContainsArray "${cmds173[@]}"; then _picocli_fcli_fod_app_list; return $?; fi
  if CompWordsContainsArray "${cmds172[@]}"; then _picocli_fcli_fod_ac_rmuser; return $?; fi
  if CompWordsContainsArray "${cmds171[@]}"; then _picocli_fcli_fod_ac_deleteuser; return $?; fi
  if CompWordsContainsArray "${cmds170[@]}"; then _picocli_fcli_fod_ac_updateuser; return $?; fi
  if CompWordsContainsArray "${cmds169[@]}"; then _picocli_fcli_fod_ac_createuser; return $?; fi
  if CompWordsContainsArray "${cmds168[@]}"; then _picocli_fcli_fod_ac_getuser; return $?; fi
  if CompWordsContainsArray "${cmds167[@]}"; then _picocli_fcli_fod_ac_lsu; return $?; fi
  if CompWordsContainsArray "${cmds166[@]}"; then _picocli_fcli_fod_ac_listusers; return $?; fi
  if CompWordsContainsArray "${cmds165[@]}"; then _picocli_fcli_fod_ac_rmgroup; return $?; fi
  if CompWordsContainsArray "${cmds164[@]}"; then _picocli_fcli_fod_ac_deletegroup; return $?; fi
  if CompWordsContainsArray "${cmds163[@]}"; then _picocli_fcli_fod_ac_updategroup; return $?; fi
  if CompWordsContainsArray "${cmds162[@]}"; then _picocli_fcli_fod_ac_creategroup; return $?; fi
  if CompWordsContainsArray "${cmds161[@]}"; then _picocli_fcli_fod_ac_getgroup; return $?; fi
  if CompWordsContainsArray "${cmds160[@]}"; then _picocli_fcli_fod_ac_lsg; return $?; fi
  if CompWordsContainsArray "${cmds159[@]}"; then _picocli_fcli_fod_ac_listgroups; return $?; fi
  if CompWordsContainsArray "${cmds158[@]}"; then _picocli_fcli_fod_ac_lsr; return $?; fi
  if CompWordsContainsArray "${cmds157[@]}"; then _picocli_fcli_fod_ac_listroles; return $?; fi
  if CompWordsContainsArray "${cmds156[@]}"; then _picocli_fcli_fod_accesscontrol_rmuser; return $?; fi
  if CompWordsContainsArray "${cmds155[@]}"; then _picocli_fcli_fod_accesscontrol_deleteuser; return $?; fi
  if CompWordsContainsArray "${cmds154[@]}"; then _picocli_fcli_fod_accesscontrol_updateuser; return $?; fi
  if CompWordsContainsArray "${cmds153[@]}"; then _picocli_fcli_fod_accesscontrol_createuser; return $?; fi
  if CompWordsContainsArray "${cmds152[@]}"; then _picocli_fcli_fod_accesscontrol_getuser; return $?; fi
  if CompWordsContainsArray "${cmds151[@]}"; then _picocli_fcli_fod_accesscontrol_lsu; return $?; fi
  if CompWordsContainsArray "${cmds150[@]}"; then _picocli_fcli_fod_accesscontrol_listusers; return $?; fi
  if CompWordsContainsArray "${cmds149[@]}"; then _picocli_fcli_fod_accesscontrol_rmgroup; return $?; fi
  if CompWordsContainsArray "${cmds148[@]}"; then _picocli_fcli_fod_accesscontrol_deletegroup; return $?; fi
  if CompWordsContainsArray "${cmds147[@]}"; then _picocli_fcli_fod_accesscontrol_updategroup; return $?; fi
  if CompWordsContainsArray "${cmds146[@]}"; then _picocli_fcli_fod_accesscontrol_creategroup; return $?; fi
  if CompWordsContainsArray "${cmds145[@]}"; then _picocli_fcli_fod_accesscontrol_getgroup; return $?; fi
  if CompWordsContainsArray "${cmds144[@]}"; then _picocli_fcli_fod_accesscontrol_lsg; return $?; fi
  if CompWordsContainsArray "${cmds143[@]}"; then _picocli_fcli_fod_accesscontrol_listgroups; return $?; fi
  if CompWordsContainsArray "${cmds142[@]}"; then _picocli_fcli_fod_accesscontrol_lsr; return $?; fi
  if CompWordsContainsArray "${cmds141[@]}"; then _picocli_fcli_fod_accesscontrol_listroles; return $?; fi
  if CompWordsContainsArray "${cmds140[@]}"; then _picocli_fcli_fod_action_sign; return $?; fi
  if CompWordsContainsArray "${cmds139[@]}"; then _picocli_fcli_fod_action_run; return $?; fi
  if CompWordsContainsArray "${cmds138[@]}"; then _picocli_fcli_fod_action_reset; return $?; fi
  if CompWordsContainsArray "${cmds137[@]}"; then _picocli_fcli_fod_action_ls; return $?; fi
  if CompWordsContainsArray "${cmds136[@]}"; then _picocli_fcli_fod_action_list; return $?; fi
  if CompWordsContainsArray "${cmds135[@]}"; then _picocli_fcli_fod_action_import; return $?; fi
  if CompWordsContainsArray "${cmds134[@]}"; then _picocli_fcli_fod_action_help; return $?; fi
  if CompWordsContainsArray "${cmds133[@]}"; then _picocli_fcli_fod_action_get; return $?; fi
  if CompWordsContainsArray "${cmds132[@]}"; then _picocli_fcli_fod_session_logout; return $?; fi
  if CompWordsContainsArray "${cmds131[@]}"; then _picocli_fcli_fod_session_login; return $?; fi
  if CompWordsContainsArray "${cmds130[@]}"; then _picocli_fcli_fod_session_ls; return $?; fi
  if CompWordsContainsArray "${cmds129[@]}"; then _picocli_fcli_fod_session_list; return $?; fi
  if CompWordsContainsArray "${cmds128[@]}"; then _picocli_fcli_fod_rest; return $?; fi
  if CompWordsContainsArray "${cmds127[@]}"; then _picocli_fcli_fod_report; return $?; fi
  if CompWordsContainsArray "${cmds126[@]}"; then _picocli_fcli_fod_issue; return $?; fi
  if CompWordsContainsArray "${cmds125[@]}"; then _picocli_fcli_fod_oss; return $?; fi
  if CompWordsContainsArray "${cmds124[@]}"; then _picocli_fcli_fod_ossscan; return $?; fi
  if CompWordsContainsArray "${cmds123[@]}"; then _picocli_fcli_fod_mast; return $?; fi
  if CompWordsContainsArray "${cmds122[@]}"; then _picocli_fcli_fod_mastscan; return $?; fi
  if CompWordsContainsArray "${cmds121[@]}"; then _picocli_fcli_fod_dast; return $?; fi
  if CompWordsContainsArray "${cmds120[@]}"; then _picocli_fcli_fod_dastscan; return $?; fi
  if CompWordsContainsArray "${cmds119[@]}"; then _picocli_fcli_fod_sast; return $?; fi
  if CompWordsContainsArray "${cmds118[@]}"; then _picocli_fcli_fod_sastscan; return $?; fi
  if CompWordsContainsArray "${cmds117[@]}"; then _picocli_fcli_fod_rel; return $?; fi
  if CompWordsContainsArray "${cmds116[@]}"; then _picocli_fcli_fod_release; return $?; fi
  if CompWordsContainsArray "${cmds115[@]}"; then _picocli_fcli_fod_ms; return $?; fi
  if CompWordsContainsArray "${cmds114[@]}"; then _picocli_fcli_fod_microservice; return $?; fi
  if CompWordsContainsArray "${cmds113[@]}"; then _picocli_fcli_fod_app; return $?; fi
  if CompWordsContainsArray "${cmds112[@]}"; then _picocli_fcli_fod_ac; return $?; fi
  if CompWordsContainsArray "${cmds111[@]}"; then _picocli_fcli_fod_accesscontrol; return $?; fi
  if CompWordsContainsArray "${cmds110[@]}"; then _picocli_fcli_fod_action; return $?; fi
  if CompWordsContainsArray "${cmds109[@]}"; then _picocli_fcli_fod_session; return $?; fi
  if CompWordsContainsArray "${cmds108[@]}"; then _picocli_fcli_cfg_truststore_set; return $?; fi
  if CompWordsContainsArray "${cmds107[@]}"; then _picocli_fcli_cfg_truststore_get; return $?; fi
  if CompWordsContainsArray "${cmds106[@]}"; then _picocli_fcli_cfg_truststore_clear; return $?; fi
  if CompWordsContainsArray "${cmds105[@]}"; then _picocli_fcli_cfg_pubkey_import; return $?; fi
  if CompWordsContainsArray "${cmds104[@]}"; then _picocli_fcli_cfg_pubkey_ls; return $?; fi
  if CompWordsContainsArray "${cmds103[@]}"; then _picocli_fcli_cfg_pubkey_list; return $?; fi
  if CompWordsContainsArray "${cmds102[@]}"; then _picocli_fcli_cfg_pubkey_get; return $?; fi
  if CompWordsContainsArray "${cmds101[@]}"; then _picocli_fcli_cfg_pubkey_rm; return $?; fi
  if CompWordsContainsArray "${cmds100[@]}"; then _picocli_fcli_cfg_pubkey_delete; return $?; fi
  if CompWordsContainsArray "${cmds99[@]}"; then _picocli_fcli_cfg_pubkey_clear; return $?; fi
  if CompWordsContainsArray "${cmds98[@]}"; then _picocli_fcli_cfg_publickey_import; return $?; fi
  if CompWordsContainsArray "${cmds97[@]}"; then _picocli_fcli_cfg_publickey_ls; return $?; fi
  if CompWordsContainsArray "${cmds96[@]}"; then _picocli_fcli_cfg_publickey_list; return $?; fi
  if CompWordsContainsArray "${cmds95[@]}"; then _picocli_fcli_cfg_publickey_get; return $?; fi
  if CompWordsContainsArray "${cmds94[@]}"; then _picocli_fcli_cfg_publickey_rm; return $?; fi
  if CompWordsContainsArray "${cmds93[@]}"; then _picocli_fcli_cfg_publickey_delete; return $?; fi
  if CompWordsContainsArray "${cmds92[@]}"; then _picocli_fcli_cfg_publickey_clear; return $?; fi
  if CompWordsContainsArray "${cmds91[@]}"; then _picocli_fcli_cfg_proxy_update; return $?; fi
  if CompWordsContainsArray "${cmds90[@]}"; then _picocli_fcli_cfg_proxy_ls; return $?; fi
  if CompWordsContainsArray "${cmds89[@]}"; then _picocli_fcli_cfg_proxy_list; return $?; fi
  if CompWordsContainsArray "${cmds88[@]}"; then _picocli_fcli_cfg_proxy_rm; return $?; fi
  if CompWordsContainsArray "${cmds87[@]}"; then _picocli_fcli_cfg_proxy_delete; return $?; fi
  if CompWordsContainsArray "${cmds86[@]}"; then _picocli_fcli_cfg_proxy_clear; return $?; fi
  if CompWordsContainsArray "${cmds85[@]}"; then _picocli_fcli_cfg_proxy_add; return $?; fi
  if CompWordsContainsArray "${cmds84[@]}"; then _picocli_fcli_cfg_truststore; return $?; fi
  if CompWordsContainsArray "${cmds83[@]}"; then _picocli_fcli_cfg_pubkey; return $?; fi
  if CompWordsContainsArray "${cmds82[@]}"; then _picocli_fcli_cfg_publickey; return $?; fi
  if CompWordsContainsArray "${cmds81[@]}"; then _picocli_fcli_cfg_proxy; return $?; fi
  if CompWordsContainsArray "${cmds80[@]}"; then _picocli_fcli_cfg_clear; return $?; fi
  if CompWordsContainsArray "${cmds79[@]}"; then _picocli_fcli_config_truststore_set; return $?; fi
  if CompWordsContainsArray "${cmds78[@]}"; then _picocli_fcli_config_truststore_get; return $?; fi
  if CompWordsContainsArray "${cmds77[@]}"; then _picocli_fcli_config_truststore_clear; return $?; fi
  if CompWordsContainsArray "${cmds76[@]}"; then _picocli_fcli_config_pubkey_import; return $?; fi
  if CompWordsContainsArray "${cmds75[@]}"; then _picocli_fcli_config_pubkey_ls; return $?; fi
  if CompWordsContainsArray "${cmds74[@]}"; then _picocli_fcli_config_pubkey_list; return $?; fi
  if CompWordsContainsArray "${cmds73[@]}"; then _picocli_fcli_config_pubkey_get; return $?; fi
  if CompWordsContainsArray "${cmds72[@]}"; then _picocli_fcli_config_pubkey_rm; return $?; fi
  if CompWordsContainsArray "${cmds71[@]}"; then _picocli_fcli_config_pubkey_delete; return $?; fi
  if CompWordsContainsArray "${cmds70[@]}"; then _picocli_fcli_config_pubkey_clear; return $?; fi
  if CompWordsContainsArray "${cmds69[@]}"; then _picocli_fcli_config_publickey_import; return $?; fi
  if CompWordsContainsArray "${cmds68[@]}"; then _picocli_fcli_config_publickey_ls; return $?; fi
  if CompWordsContainsArray "${cmds67[@]}"; then _picocli_fcli_config_publickey_list; return $?; fi
  if CompWordsContainsArray "${cmds66[@]}"; then _picocli_fcli_config_publickey_get; return $?; fi
  if CompWordsContainsArray "${cmds65[@]}"; then _picocli_fcli_config_publickey_rm; return $?; fi
  if CompWordsContainsArray "${cmds64[@]}"; then _picocli_fcli_config_publickey_delete; return $?; fi
  if CompWordsContainsArray "${cmds63[@]}"; then _picocli_fcli_config_publickey_clear; return $?; fi
  if CompWordsContainsArray "${cmds62[@]}"; then _picocli_fcli_config_proxy_update; return $?; fi
  if CompWordsContainsArray "${cmds61[@]}"; then _picocli_fcli_config_proxy_ls; return $?; fi
  if CompWordsContainsArray "${cmds60[@]}"; then _picocli_fcli_config_proxy_list; return $?; fi
  if CompWordsContainsArray "${cmds59[@]}"; then _picocli_fcli_config_proxy_rm; return $?; fi
  if CompWordsContainsArray "${cmds58[@]}"; then _picocli_fcli_config_proxy_delete; return $?; fi
  if CompWordsContainsArray "${cmds57[@]}"; then _picocli_fcli_config_proxy_clear; return $?; fi
  if CompWordsContainsArray "${cmds56[@]}"; then _picocli_fcli_config_proxy_add; return $?; fi
  if CompWordsContainsArray "${cmds55[@]}"; then _picocli_fcli_config_truststore; return $?; fi
  if CompWordsContainsArray "${cmds54[@]}"; then _picocli_fcli_config_pubkey; return $?; fi
  if CompWordsContainsArray "${cmds53[@]}"; then _picocli_fcli_config_publickey; return $?; fi
  if CompWordsContainsArray "${cmds52[@]}"; then _picocli_fcli_config_proxy; return $?; fi
  if CompWordsContainsArray "${cmds51[@]}"; then _picocli_fcli_config_clear; return $?; fi
  if CompWordsContainsArray "${cmds50[@]}"; then _picocli_fcli_aviator_token_validate; return $?; fi
  if CompWordsContainsArray "${cmds49[@]}"; then _picocli_fcli_aviator_token_revoke; return $?; fi
  if CompWordsContainsArray "${cmds48[@]}"; then _picocli_fcli_aviator_token_ls; return $?; fi
  if CompWordsContainsArray "${cmds47[@]}"; then _picocli_fcli_aviator_token_list; return $?; fi
  if CompWordsContainsArray "${cmds46[@]}"; then _picocli_fcli_aviator_token_rm; return $?; fi
  if CompWordsContainsArray "${cmds45[@]}"; then _picocli_fcli_aviator_token_delete; return $?; fi
  if CompWordsContainsArray "${cmds44[@]}"; then _picocli_fcli_aviator_token_create; return $?; fi
  if CompWordsContainsArray "${cmds43[@]}"; then _picocli_fcli_aviator_ssc_audit; return $?; fi
  if CompWordsContainsArray "${cmds42[@]}"; then _picocli_fcli_aviator_entitlement_ls; return $?; fi
  if CompWordsContainsArray "${cmds41[@]}"; then _picocli_fcli_aviator_entitlement_list; return $?; fi
  if CompWordsContainsArray "${cmds40[@]}"; then _picocli_fcli_aviator_app_update; return $?; fi
  if CompWordsContainsArray "${cmds39[@]}"; then _picocli_fcli_aviator_app_ls; return $?; fi
  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_fcli_aviator_app_list; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_fcli_aviator_app_get; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_fcli_aviator_app_rm; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_fcli_aviator_app_delete; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_fcli_aviator_app_create; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_fcli_aviator_session_logout; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_fcli_aviator_session_login; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_fcli_aviator_session_ls; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_fcli_aviator_session_list; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_fcli_aviator_adminconfig_rm; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_fcli_aviator_adminconfig_delete; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_fcli_aviator_adminconfig_create; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_fcli_aviator_adminconfig_ls; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_fcli_aviator_adminconfig_list; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_fcli_aviator_token; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_fcli_aviator_ssc; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_fcli_aviator_entitlement; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_fcli_aviator_app; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_fcli_aviator_session; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_fcli_aviator_adminconfig; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_fcli_action_sign; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_fcli_action_run; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_fcli_action_reset; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_fcli_action_ls; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_fcli_action_list; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_fcli_action_import; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_fcli_action_help; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_fcli_action_get; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_fcli_util; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_fcli_license; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_fcli_tool; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_fcli_ssc; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_fcli_scsast; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_fcli_scdast; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_fcli_fod; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_fcli_cfg; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_fcli_config; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_fcli_aviator; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_fcli_action; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_fcli; return $?;
}

# Generates completions for the options and subcommands of the `fcli` command.
function _picocli_fcli() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="action aviator config cfg fod sc-dast sc-sast ssc tool license util"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `action` subcommand.
function _picocli_fcli_action() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get help import list ls reset run sign"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `aviator` subcommand.
function _picocli_fcli_aviator() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="admin-config session app entitlement ssc token"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_fcli_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear proxy public-key pubkey truststore"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cfg` subcommand.
function _picocli_fcli_cfg() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear proxy public-key pubkey truststore"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fod` subcommand.
function _picocli_fcli_fod() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="session action access-control ac app microservice ms release rel sast-scan sast dast-scan dast mast-scan mast oss-scan oss issue report rest"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sc-dast` subcommand.
function _picocli_fcli_scdast() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="scan scan-policy scan-settings sensor rest"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sc-sast` subcommand.
function _picocli_fcli_scsast() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="scan sensor sensor-pool pool rest"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ssc` subcommand.
function _picocli_fcli_ssc() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="session action access-control ac alert app appversion av artifact attribute attr issue performance-indicator pi variable var plugin report system-state state rest"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `tool` subcommand.
function _picocli_fcli_tool() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="bugtracker-utility fbtu debricked-cli dcli fcli fod-uploader fodupload sc-client scancentral-client vuln-exporter fve definitions"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `license` subcommand.
function _picocli_fcli_license() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="msp-report ncd-report"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `util` subcommand.
function _picocli_fcli_util() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="all-commands auto-complete crypto state variable var"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_action_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_fcli_action_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_action_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey --on-invalid-signature --on-unsigned --on-no-public-key --on-invalid-version -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onInvalidSignature_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-signature values
  local onUnsigned_option_args=("ignore" "warn" "fail" "prompt") # --on-unsigned values
  local onNoPublicKey_option_args=("ignore" "warn" "fail" "prompt") # --on-no-public-key values
  local onUnsupportedVersion_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-version values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
    --on-invalid-signature)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onInvalidSignature_option_args[@]}" ) )
      return $?
      ;;
    --on-unsigned)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsigned_option_args[@]}" ) )
      return $?
      ;;
    --on-no-public-key)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onNoPublicKey_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-version)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsupportedVersion_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_action_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_action_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `reset` subcommand.
function _picocli_fcli_action_reset() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_action_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey action-parameters --progress --on-invalid-signature --on-unsigned --on-no-public-key --on-invalid-version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local onInvalidSignature_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-signature values
  local onUnsigned_option_args=("ignore" "warn" "fail" "prompt") # --on-unsigned values
  local onNoPublicKey_option_args=("ignore" "warn" "fail" "prompt") # --on-no-public-key values
  local onUnsupportedVersion_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-version values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
    action-parameters)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-signature)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onInvalidSignature_option_args[@]}" ) )
      return $?
      ;;
    --on-unsigned)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsigned_option_args[@]}" ) )
      return $?
      ;;
    --on-no-public-key)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onNoPublicKey_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-version)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsupportedVersion_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sign` subcommand.
function _picocli_fcli_action_sign() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --in --out --info --signer --with --pubout --password -p"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --in)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --out)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --info)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --signer)
      return
      ;;
    --with)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --pubout)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --password|-p)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `admin-config` subcommand.
function _picocli_fcli_aviator_adminconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls create delete rm"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_fcli_aviator_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls login logout"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `app` subcommand.
function _picocli_fcli_aviator_app() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create delete rm get list ls update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `entitlement` subcommand.
function _picocli_fcli_aviator_entitlement() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ssc` subcommand.
function _picocli_fcli_aviator_ssc() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="audit"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `token` subcommand.
function _picocli_fcli_aviator_token() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create delete rm list ls revoke validate"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_aviator_adminconfig_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_aviator_adminconfig_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_aviator_adminconfig_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --url -u --tenant -t --private-key -p --admin-config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --url|-u)
      return
      ;;
    --tenant|-t)
      return
      ;;
    --private-key|-p)
      return
      ;;
    --admin-config)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_aviator_adminconfig_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --admin-config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --admin-config)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_aviator_adminconfig_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --admin-config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --admin-config)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_aviator_session_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_aviator_session_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_fcli_aviator_session_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --token -t --url --aviator-session --av-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --token|-t)
      return
      ;;
    --url)
      return
      ;;
    --aviator-session|--av-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logout` subcommand.
function _picocli_fcli_aviator_session_logout() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --aviator-session --av-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --aviator-session|--av-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_aviator_app_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file --progress"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_aviator_app_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_aviator_app_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_aviator_app_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_aviator_app_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_aviator_app_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_aviator_app_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -n --name"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -n|--name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_aviator_entitlement_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_aviator_entitlement_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `audit` subcommand.
function _picocli_fcli_aviator_ssc_audit() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --progress --delim --appversion --av --aviator-session --av-session --app --tag-mapping"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
    --aviator-session|--av-session)
      return
      ;;
    --app)
      return
      ;;
    --tag-mapping)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_aviator_token_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -e --email -n --name --end-date --save-token"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -e|--email)
      return
      ;;
    -n|--name)
      return
      ;;
    --end-date)
      return
      ;;
    --save-token)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_aviator_token_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -e --email --token -t"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -e|--email)
      return
      ;;
    --token|-t)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_aviator_token_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -e --email --token -t"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -e|--email)
      return
      ;;
    --token|-t)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_aviator_token_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -q --query -e --email"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -e|--email)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_aviator_token_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -q --query -e --email"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -e|--email)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `revoke` subcommand.
function _picocli_fcli_aviator_token_revoke() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file -e --email --token -t"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -e|--email)
      return
      ;;
    --token|-t)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `validate` subcommand.
function _picocli_fcli_aviator_token_validate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --admin-config -o --output --style --store --to-file --token -t"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --admin-config)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --token|-t)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `proxy` subcommand.
function _picocli_fcli_config_proxy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="add clear delete rm list ls update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `public-key` subcommand.
function _picocli_fcli_config_publickey() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear delete rm get list ls import"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pubkey` subcommand.
function _picocli_fcli_config_pubkey() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear delete rm get list ls import"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `truststore` subcommand.
function _picocli_fcli_config_truststore() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear get set"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_fcli_config_proxy_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --name"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_proxy_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_proxy_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_proxy_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_proxy_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_proxy_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_config_proxy_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --proxy"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --proxy)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_publickey_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_publickey_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_publickey_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_publickey_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_publickey_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_publickey_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_config_publickey_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --name -n"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_pubkey_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_config_pubkey_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_config_pubkey_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_pubkey_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_config_pubkey_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_config_pubkey_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_config_pubkey_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --name -n"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_config_truststore_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_config_truststore_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_config_truststore_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -f --file -p --password -t --type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--password)
      return
      ;;
    -t|--type)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `proxy` subcommand.
function _picocli_fcli_cfg_proxy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="add clear delete rm list ls update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `public-key` subcommand.
function _picocli_fcli_cfg_publickey() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear delete rm get list ls import"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pubkey` subcommand.
function _picocli_fcli_cfg_pubkey() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear delete rm get list ls import"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `truststore` subcommand.
function _picocli_fcli_cfg_truststore() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear get set"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_fcli_cfg_proxy_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --name"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_proxy_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_proxy_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_proxy_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_proxy_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_proxy_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_cfg_proxy_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --include-hosts -i --exclude-hosts -e --user -u --password -p --priority --modules -m --proxy"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --include-hosts|-i)
      return
      ;;
    --exclude-hosts|-e)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --priority)
      return
      ;;
    --modules|-m)
      return
      ;;
    --proxy)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_publickey_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_publickey_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_publickey_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_publickey_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_publickey_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_publickey_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_cfg_publickey_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --name -n"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_pubkey_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_cfg_pubkey_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_cfg_pubkey_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_pubkey_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_cfg_pubkey_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_cfg_pubkey_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_cfg_pubkey_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --name -n"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_cfg_truststore_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_cfg_truststore_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_fcli_cfg_truststore_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -f --file -p --password -t --type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--password)
      return
      ;;
    -t|--type)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_fcli_fod_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls login logout"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `action` subcommand.
function _picocli_fcli_fod_action() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get help import list ls reset run sign"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `access-control` subcommand.
function _picocli_fcli_fod_accesscontrol() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-roles lsr list-groups lsg get-group create-group update-group delete-group rm-group list-users lsu get-user create-user update-user delete-user rm-user"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ac` subcommand.
function _picocli_fcli_fod_ac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-roles lsr list-groups lsg get-group create-group update-group delete-group rm-group list-users lsu get-user create-user update-user delete-user rm-user"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `app` subcommand.
function _picocli_fcli_fod_app() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls get create update delete rm list-scans lss"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `microservice` subcommand.
function _picocli_fcli_fod_microservice() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls create update delete rm"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ms` subcommand.
function _picocli_fcli_fod_ms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls create update delete rm"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `release` subcommand.
function _picocli_fcli_fod_release() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls get create update delete rm list-assessment-types lsat list-scans lss wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rel` subcommand.
function _picocli_fcli_fod_rel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls get create update delete rm list-assessment-types lsat list-scans lss wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sast-scan` subcommand.
function _picocli_fcli_fod_sastscan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="cancel download download-latest get get-config import list ls setup start wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sast` subcommand.
function _picocli_fcli_fod_sast() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="cancel download download-latest get get-config import list ls setup start wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dast-scan` subcommand.
function _picocli_fcli_fod_dastscan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="cancel download download-latest import list ls setup-website setup-workflow setup-api get-config start upload-file"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dast` subcommand.
function _picocli_fcli_fod_dast() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="cancel download download-latest import list ls setup-website setup-workflow setup-api get-config start upload-file"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `mast-scan` subcommand.
function _picocli_fcli_fod_mastscan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="cancel download download-latest get get-config import list ls setup start wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `mast` subcommand.
function _picocli_fcli_fod_mast() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="cancel download download-latest get get-config import list ls setup start wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `oss-scan` subcommand.
function _picocli_fcli_fod_ossscan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="download download-latest get import import-debricked list ls start wait-for list-components lsc"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `oss` subcommand.
function _picocli_fcli_fod_oss() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="download download-latest get import import-debricked list ls start wait-for list-components lsc"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `issue` subcommand.
function _picocli_fcli_fod_issue() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `report` subcommand.
function _picocli_fcli_fod_report() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls get create delete rm wait-for download list-templates lst"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rest` subcommand.
function _picocli_fcli_fod_rest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="call lookup"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_session_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_session_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_fcli_fod_session_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --scopes --user -u --password -p -t --tenant --client-id --client-secret --socket-timeout --connect-timeout --url --fod-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --scopes)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -t|--tenant)
      return
      ;;
    --client-id)
      return
      ;;
    --client-secret)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --fod-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logout` subcommand.
function _picocli_fcli_fod_session_logout() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --fod-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --fod-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_action_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_fcli_fod_action_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_action_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey --on-invalid-signature --on-unsigned --on-no-public-key --on-invalid-version -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onInvalidSignature_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-signature values
  local onUnsigned_option_args=("ignore" "warn" "fail" "prompt") # --on-unsigned values
  local onNoPublicKey_option_args=("ignore" "warn" "fail" "prompt") # --on-no-public-key values
  local onUnsupportedVersion_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-version values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
    --on-invalid-signature)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onInvalidSignature_option_args[@]}" ) )
      return $?
      ;;
    --on-unsigned)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsigned_option_args[@]}" ) )
      return $?
      ;;
    --on-no-public-key)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onNoPublicKey_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-version)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsupportedVersion_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_action_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_action_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `reset` subcommand.
function _picocli_fcli_fod_action_reset() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_fod_action_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey action-parameters --progress --on-invalid-signature --on-unsigned --on-no-public-key --on-invalid-version --fod-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local onInvalidSignature_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-signature values
  local onUnsigned_option_args=("ignore" "warn" "fail" "prompt") # --on-unsigned values
  local onNoPublicKey_option_args=("ignore" "warn" "fail" "prompt") # --on-no-public-key values
  local onUnsupportedVersion_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-version values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
    action-parameters)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-signature)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onInvalidSignature_option_args[@]}" ) )
      return $?
      ;;
    --on-unsigned)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsigned_option_args[@]}" ) )
      return $?
      ;;
    --on-no-public-key)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onNoPublicKey_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-version)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsupportedVersion_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sign` subcommand.
function _picocli_fcli_fod_action_sign() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --in --out --info --signer --with --pubout --password -p"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --in)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --out)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --info)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --signer)
      return
      ;;
    --with)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --pubout)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --password|-p)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-roles` subcommand.
function _picocli_fcli_fod_accesscontrol_listroles() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsr` subcommand.
function _picocli_fcli_fod_accesscontrol_lsr() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-groups` subcommand.
function _picocli_fcli_fod_accesscontrol_listgroups() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsg` subcommand.
function _picocli_fcli_fod_accesscontrol_lsg() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-group` subcommand.
function _picocli_fcli_fod_accesscontrol_getgroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-group` subcommand.
function _picocli_fcli_fod_accesscontrol_creategroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --add-all-users"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --users --applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --users)
      return
      ;;
    --applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-group` subcommand.
function _picocli_fcli_fod_accesscontrol_updategroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --add-all-users --remove-all-users"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --name --add-users --remove-users --add-apps --add-applications --remove-apps --remove-applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name)
      return
      ;;
    --add-users)
      return
      ;;
    --remove-users)
      return
      ;;
    --add-apps|--add-applications)
      return
      ;;
    --remove-apps|--remove-applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-group` subcommand.
function _picocli_fcli_fod_accesscontrol_deletegroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-group` subcommand.
function _picocli_fcli_fod_accesscontrol_rmgroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-users` subcommand.
function _picocli_fcli_fod_accesscontrol_listusers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsu` subcommand.
function _picocli_fcli_fod_accesscontrol_lsu() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-user` subcommand.
function _picocli_fcli_fod_accesscontrol_getuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-user` subcommand.
function _picocli_fcli_fod_accesscontrol_createuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --email --firstname --lastname --phone --phone-number --role --groups --applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --email)
      return
      ;;
    --firstname)
      return
      ;;
    --lastname)
      return
      ;;
    --phone|--phone-number)
      return
      ;;
    --role)
      return
      ;;
    --groups)
      return
      ;;
    --applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-user` subcommand.
function _picocli_fcli_fod_accesscontrol_updateuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --password-never-expires --suspended --must-change"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --email --firstname --lastname --phone --phone-number --password --role --add-groups --remove-groups --add-apps --add-applications --remove-apps --remove-applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --email)
      return
      ;;
    --firstname)
      return
      ;;
    --lastname)
      return
      ;;
    --phone|--phone-number)
      return
      ;;
    --password)
      return
      ;;
    --role)
      return
      ;;
    --add-groups)
      return
      ;;
    --remove-groups)
      return
      ;;
    --add-apps|--add-applications)
      return
      ;;
    --remove-apps|--remove-applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-user` subcommand.
function _picocli_fcli_fod_accesscontrol_deleteuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-user` subcommand.
function _picocli_fcli_fod_accesscontrol_rmuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-roles` subcommand.
function _picocli_fcli_fod_ac_listroles() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsr` subcommand.
function _picocli_fcli_fod_ac_lsr() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-groups` subcommand.
function _picocli_fcli_fod_ac_listgroups() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsg` subcommand.
function _picocli_fcli_fod_ac_lsg() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-group` subcommand.
function _picocli_fcli_fod_ac_getgroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-group` subcommand.
function _picocli_fcli_fod_ac_creategroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --add-all-users"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --users --applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --users)
      return
      ;;
    --applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-group` subcommand.
function _picocli_fcli_fod_ac_updategroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --add-all-users --remove-all-users"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --name --add-users --remove-users --add-apps --add-applications --remove-apps --remove-applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name)
      return
      ;;
    --add-users)
      return
      ;;
    --remove-users)
      return
      ;;
    --add-apps|--add-applications)
      return
      ;;
    --remove-apps|--remove-applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-group` subcommand.
function _picocli_fcli_fod_ac_deletegroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-group` subcommand.
function _picocli_fcli_fod_ac_rmgroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-users` subcommand.
function _picocli_fcli_fod_ac_listusers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsu` subcommand.
function _picocli_fcli_fod_ac_lsu() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-user` subcommand.
function _picocli_fcli_fod_ac_getuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-user` subcommand.
function _picocli_fcli_fod_ac_createuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --email --firstname --lastname --phone --phone-number --role --groups --applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --email)
      return
      ;;
    --firstname)
      return
      ;;
    --lastname)
      return
      ;;
    --phone|--phone-number)
      return
      ;;
    --role)
      return
      ;;
    --groups)
      return
      ;;
    --applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-user` subcommand.
function _picocli_fcli_fod_ac_updateuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --password-never-expires --suspended --must-change"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --email --firstname --lastname --phone --phone-number --password --role --add-groups --remove-groups --add-apps --add-applications --remove-apps --remove-applications"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --email)
      return
      ;;
    --firstname)
      return
      ;;
    --lastname)
      return
      ;;
    --phone|--phone-number)
      return
      ;;
    --password)
      return
      ;;
    --role)
      return
      ;;
    --add-groups)
      return
      ;;
    --remove-groups)
      return
      ;;
    --add-apps|--add-applications)
      return
      ;;
    --remove-apps|--remove-applications)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-user` subcommand.
function _picocli_fcli_fod_ac_deleteuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-user` subcommand.
function _picocli_fcli_fod_ac_rmuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_app_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_app_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_app_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_fod_app_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --skip-if-exists --auto-required-attrs"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --description -d --notify --delim --release --release-description --owner --groups --type --app-type --criticality --business-criticality --attrs --attributes --status --sdlc-status"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local appType_option_args=("Web" "ThickClient" "Mobile" "Microservice") # --app-type values
  local criticalityType_option_args=("High" "Medium" "Low") # --business-criticality values
  local sdlcStatusType_option_args=("Development" "QA" "Production" "Retired") # --sdlc-status values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --description|-d)
      return
      ;;
    --notify)
      return
      ;;
    --delim)
      return
      ;;
    --release)
      return
      ;;
    --release-description)
      return
      ;;
    --owner)
      return
      ;;
    --groups)
      return
      ;;
    --type|--app-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${appType_option_args[@]}" ) )
      return $?
      ;;
    --criticality|--business-criticality)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${criticalityType_option_args[@]}" ) )
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
    --status|--sdlc-status)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${sdlcStatusType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_fod_app_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --name -n --description -d --notify --criticality --business-criticality --attrs --attributes"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local criticalityType_option_args=("High" "Medium" "Low") # --business-criticality values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
    --notify)
      return
      ;;
    --criticality|--business-criticality)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${criticalityType_option_args[@]}" ) )
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_fod_app_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_fod_app_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-scans` subcommand.
function _picocli_fcli_fod_app_listscans() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lss` subcommand.
function _picocli_fcli_fod_app_lss() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_microservice_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_microservice_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_fod_microservice_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --skip-if-exists"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_fod_microservice_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --name -n"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_fod_microservice_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_fod_microservice_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_ms_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_ms_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_fod_ms_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --skip-if-exists"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_fod_ms_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --name -n"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --name|-n)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_fod_ms_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_fod_ms_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_release_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_release_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_release_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_fod_release_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --skip-if-exists --auto-required-attrs"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --copy-from --description -d --status --sdlc-status --attrs --attributes --app-description --app-notify --app-owner --app-groups --app-type --app-criticality"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local sdlcStatusType_option_args=("Development" "QA" "Production" "Retired") # --sdlc-status values
  local appType_option_args=("Web" "ThickClient" "Mobile" "Microservice") # --app-type values
  local criticalityType_option_args=("High" "Medium" "Low") # --app-criticality values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --copy-from)
      return
      ;;
    --description|-d)
      return
      ;;
    --status|--sdlc-status)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${sdlcStatusType_option_args[@]}" ) )
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
    --app-description)
      return
      ;;
    --app-notify)
      return
      ;;
    --app-owner)
      return
      ;;
    --app-groups)
      return
      ;;
    --app-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${appType_option_args[@]}" ) )
      return $?
      ;;
    --app-criticality)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${criticalityType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_fod_release_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --name -n --description -d --owner --status --sdlc-status --attrs --attributes"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local sdlcStatusType_option_args=("Development" "QA" "Production" "Retired") # --sdlc-status values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
    --owner)
      return
      ;;
    --status|--sdlc-status)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${sdlcStatusType_option_args[@]}" ) )
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_fod_release_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_fod_release_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-assessment-types` subcommand.
function _picocli_fcli_fod_release_listassessmenttypes() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Static" "Dynamic" "Mobile" "Monitoring" "Network" "OpenSource" "Container") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsat` subcommand.
function _picocli_fcli_fod_release_lsat() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Static" "Dynamic" "Mobile" "Monitoring" "Network" "OpenSource" "Container") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-scans` subcommand.
function _picocli_fcli_fod_release_listscans() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lss` subcommand.
function _picocli_fcli_fod_release_lss() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_release_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -s --suspended"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_rel_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_rel_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --app --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --app)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_rel_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_fod_rel_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --skip-if-exists --auto-required-attrs"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --copy-from --description -d --status --sdlc-status --attrs --attributes --app-description --app-notify --app-owner --app-groups --app-type --app-criticality"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local sdlcStatusType_option_args=("Development" "QA" "Production" "Retired") # --sdlc-status values
  local appType_option_args=("Web" "ThickClient" "Mobile" "Microservice") # --app-type values
  local criticalityType_option_args=("High" "Medium" "Low") # --app-criticality values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --copy-from)
      return
      ;;
    --description|-d)
      return
      ;;
    --status|--sdlc-status)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${sdlcStatusType_option_args[@]}" ) )
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
    --app-description)
      return
      ;;
    --app-notify)
      return
      ;;
    --app-owner)
      return
      ;;
    --app-groups)
      return
      ;;
    --app-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${appType_option_args[@]}" ) )
      return $?
      ;;
    --app-criticality)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${criticalityType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_fod_rel_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --name -n --description -d --owner --status --sdlc-status --attrs --attributes"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local sdlcStatusType_option_args=("Development" "QA" "Production" "Retired") # --sdlc-status values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
    --owner)
      return
      ;;
    --status|--sdlc-status)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${sdlcStatusType_option_args[@]}" ) )
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_fod_rel_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_fod_rel_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-assessment-types` subcommand.
function _picocli_fcli_fod_rel_listassessmenttypes() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Static" "Dynamic" "Mobile" "Monitoring" "Network" "OpenSource" "Container") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsat` subcommand.
function _picocli_fcli_fod_rel_lsat() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Static" "Dynamic" "Mobile" "Monitoring" "Network" "OpenSource" "Container") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-scans` subcommand.
function _picocli_fcli_fod_rel_listscans() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lss` subcommand.
function _picocli_fcli_fod_rel_lss() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_rel_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -s --suspended"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_fod_sastscan_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_sastscan_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_sastscan_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_sastscan_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-config` subcommand.
function _picocli_fcli_fod_sastscan_getconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_sastscan_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_sastscan_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_sastscan_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup` subcommand.
function _picocli_fcli_fod_sastscan_setup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --oss --include-third-party-libs --use-source-control --skip-if-exists --use-aviator"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id --technology-stack --language-level --audit-preference --progress"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local auditPreferenceType_option_args=("Manual" "Automated") # --audit-preference values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    --technology-stack)
      return
      ;;
    --language-level)
      return
      ;;
    --audit-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${auditPreferenceType_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_sastscan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file --notes -f --file --remediation --remediation-preference"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local remediationScanPreferenceType_option_args=("RemediationScanIfAvailable" "RemediationScanOnly" "NonRemediationScanOnly") # --remediation-preference values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --notes)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --remediation|--remediation-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${remediationScanPreferenceType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_sastscan_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Not_Started" "In_Progress" "Completed" "Canceled" "Waiting" "Scheduled" "Queued") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_fod_sast_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_sast_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_sast_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_sast_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-config` subcommand.
function _picocli_fcli_fod_sast_getconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_sast_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_sast_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_sast_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup` subcommand.
function _picocli_fcli_fod_sast_setup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --oss --include-third-party-libs --use-source-control --skip-if-exists --use-aviator"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id --technology-stack --language-level --audit-preference --progress"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local auditPreferenceType_option_args=("Manual" "Automated") # --audit-preference values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    --technology-stack)
      return
      ;;
    --language-level)
      return
      ;;
    --audit-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${auditPreferenceType_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_sast_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file --notes -f --file --remediation --remediation-preference"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local remediationScanPreferenceType_option_args=("RemediationScanIfAvailable" "RemediationScanOnly" "NonRemediationScanOnly") # --remediation-preference values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --notes)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --remediation|--remediation-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${remediationScanPreferenceType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_sast_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Not_Started" "In_Progress" "Completed" "Canceled" "Waiting" "Scheduled" "Queued") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_fod_dastscan_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_dastscan_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_dastscan_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_dastscan_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_dastscan_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_dastscan_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup-website` subcommand.
function _picocli_fcli_fod_dastscan_setupwebsite() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --redundant-page-detection --restrict --false-positive-removal --create-login-macro"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id -f --file -o --output --style --store --to-file --url --site-url --file-id -e --exclusions --policy --timebox --environment --timezone --network-auth-type -u --network-username -p --network-password --macro-primary-username --macro-primary-password --macro-secondary-username --macro-secondary-password --vpn"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local environmentFacingType_option_args=("Internal" "External") # --environment values
  local networkAuthenticationType_option_args=("Basic" "NTLM" "Kerberos" "Digest" "Automatic" "ADFS_CBT") # --network-auth-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --url|--site-url)
      return
      ;;
    --file-id)
      return
      ;;
    -e|--exclusions)
      return
      ;;
    --policy)
      return
      ;;
    --timebox)
      return
      ;;
    --environment)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${environmentFacingType_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --network-auth-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${networkAuthenticationType_option_args[@]}" ) )
      return $?
      ;;
    -u|--network-username)
      return
      ;;
    -p|--network-password)
      return
      ;;
    --macro-primary-username)
      return
      ;;
    --macro-primary-password)
      return
      ;;
    --macro-secondary-username)
      return
      ;;
    --macro-secondary-password)
      return
      ;;
    --vpn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup-workflow` subcommand.
function _picocli_fcli_fod_dastscan_setupworkflow() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --false-positive-removal"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id -f --file -o --output --style --store --to-file --hosts --allowed-hosts --file-id --policy --environment --timezone --network-auth-type -u --network-username -p --network-password --vpn"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local environmentFacingType_option_args=("Internal" "External") # --environment values
  local networkAuthenticationType_option_args=("Basic" "NTLM" "Kerberos" "Digest" "Automatic" "ADFS_CBT") # --network-auth-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --hosts|--allowed-hosts)
      return
      ;;
    --file-id)
      return
      ;;
    --policy)
      return
      ;;
    --environment)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${environmentFacingType_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --network-auth-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${networkAuthenticationType_option_args[@]}" ) )
      return $?
      ;;
    -u|--network-username)
      return
      ;;
    -p|--network-password)
      return
      ;;
    --vpn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup-api` subcommand.
function _picocli_fcli_fod_dastscan_setupapi() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --false-positive-removal"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id -f --file -o --output --style --store --to-file --type --file-id --url --api-url --key --api-key --scheme-type --host --service-path --environment --timebox --timezone --network-auth-type -u --network-username -p --network-password --vpn"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local apiType_option_args=("OpenApi" "Postman" "GraphQL" "GRPC") # --type values
  local apiSchemeType_option_args=("HTTP" "HTTPS" "HTTPandHTTPs") # --scheme-type values
  local environmentFacingType_option_args=("Internal" "External") # --environment values
  local networkAuthenticationType_option_args=("Basic" "NTLM" "Kerberos" "Digest" "Automatic" "ADFS_CBT") # --network-auth-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${apiType_option_args[@]}" ) )
      return $?
      ;;
    --file-id)
      return
      ;;
    --url|--api-url)
      return
      ;;
    --key|--api-key)
      return
      ;;
    --scheme-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${apiSchemeType_option_args[@]}" ) )
      return $?
      ;;
    --host)
      return
      ;;
    --service-path)
      return
      ;;
    --environment)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${environmentFacingType_option_args[@]}" ) )
      return $?
      ;;
    --timebox)
      return
      ;;
    --timezone)
      return
      ;;
    --network-auth-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${networkAuthenticationType_option_args[@]}" ) )
      return $?
      ;;
    -u|--network-username)
      return
      ;;
    -p|--network-password)
      return
      ;;
    --vpn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-config` subcommand.
function _picocli_fcli_fod_dastscan_getconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_dastscan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload-file` subcommand.
function _picocli_fcli_fod_dastscan_uploadfile() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file --file-type --dast-file-type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local dastFileType_option_args=("OpenAPIDefinition" "PostmanCollection" "GraphQLDefinition" "GRPCDefinition" "WorkflowDrivenMacro" "LoginMacro") # --dast-file-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file-type|--dast-file-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${dastFileType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_fod_dast_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_dast_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_dast_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_dast_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_dast_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_dast_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup-website` subcommand.
function _picocli_fcli_fod_dast_setupwebsite() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --redundant-page-detection --restrict --false-positive-removal --create-login-macro"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id -f --file -o --output --style --store --to-file --url --site-url --file-id -e --exclusions --policy --timebox --environment --timezone --network-auth-type -u --network-username -p --network-password --macro-primary-username --macro-primary-password --macro-secondary-username --macro-secondary-password --vpn"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local environmentFacingType_option_args=("Internal" "External") # --environment values
  local networkAuthenticationType_option_args=("Basic" "NTLM" "Kerberos" "Digest" "Automatic" "ADFS_CBT") # --network-auth-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --url|--site-url)
      return
      ;;
    --file-id)
      return
      ;;
    -e|--exclusions)
      return
      ;;
    --policy)
      return
      ;;
    --timebox)
      return
      ;;
    --environment)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${environmentFacingType_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --network-auth-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${networkAuthenticationType_option_args[@]}" ) )
      return $?
      ;;
    -u|--network-username)
      return
      ;;
    -p|--network-password)
      return
      ;;
    --macro-primary-username)
      return
      ;;
    --macro-primary-password)
      return
      ;;
    --macro-secondary-username)
      return
      ;;
    --macro-secondary-password)
      return
      ;;
    --vpn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup-workflow` subcommand.
function _picocli_fcli_fod_dast_setupworkflow() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --false-positive-removal"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id -f --file -o --output --style --store --to-file --hosts --allowed-hosts --file-id --policy --environment --timezone --network-auth-type -u --network-username -p --network-password --vpn"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local environmentFacingType_option_args=("Internal" "External") # --environment values
  local networkAuthenticationType_option_args=("Basic" "NTLM" "Kerberos" "Digest" "Automatic" "ADFS_CBT") # --network-auth-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --hosts|--allowed-hosts)
      return
      ;;
    --file-id)
      return
      ;;
    --policy)
      return
      ;;
    --environment)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${environmentFacingType_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --network-auth-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${networkAuthenticationType_option_args[@]}" ) )
      return $?
      ;;
    -u|--network-username)
      return
      ;;
    -p|--network-password)
      return
      ;;
    --vpn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup-api` subcommand.
function _picocli_fcli_fod_dast_setupapi() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --false-positive-removal"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --assessment-type --frequency --entitlement-frequency --entitlement-id -f --file -o --output --style --store --to-file --type --file-id --url --api-url --key --api-key --scheme-type --host --service-path --environment --timebox --timezone --network-auth-type -u --network-username -p --network-password --vpn"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local apiType_option_args=("OpenApi" "Postman" "GraphQL" "GRPC") # --type values
  local apiSchemeType_option_args=("HTTP" "HTTPS" "HTTPandHTTPs") # --scheme-type values
  local environmentFacingType_option_args=("Internal" "External") # --environment values
  local networkAuthenticationType_option_args=("Basic" "NTLM" "Kerberos" "Digest" "Automatic" "ADFS_CBT") # --network-auth-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --entitlement-id)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${apiType_option_args[@]}" ) )
      return $?
      ;;
    --file-id)
      return
      ;;
    --url|--api-url)
      return
      ;;
    --key|--api-key)
      return
      ;;
    --scheme-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${apiSchemeType_option_args[@]}" ) )
      return $?
      ;;
    --host)
      return
      ;;
    --service-path)
      return
      ;;
    --environment)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${environmentFacingType_option_args[@]}" ) )
      return $?
      ;;
    --timebox)
      return
      ;;
    --timezone)
      return
      ;;
    --network-auth-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${networkAuthenticationType_option_args[@]}" ) )
      return $?
      ;;
    -u|--network-username)
      return
      ;;
    -p|--network-password)
      return
      ;;
    --vpn)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-config` subcommand.
function _picocli_fcli_fod_dast_getconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_dast_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload-file` subcommand.
function _picocli_fcli_fod_dast_uploadfile() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file --file-type --dast-file-type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local dastFileType_option_args=("OpenAPIDefinition" "PostmanCollection" "GraphQLDefinition" "GRPCDefinition" "WorkflowDrivenMacro" "LoginMacro") # --dast-file-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file-type|--dast-file-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${dastFileType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_fod_mastscan_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_mastscan_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_mastscan_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_mastscan_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-config` subcommand.
function _picocli_fcli_fod_mastscan_getconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_mastscan_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_mastscan_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_mastscan_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup` subcommand.
function _picocli_fcli_fod_mastscan_setup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --skip-if-exists"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --release --rel --assessment-type --entitlement-id --frequency --entitlement-frequency --framework --timezone --audit-preference --platform --progress"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local mobileFramework_option_args=("iOS" "Android") # --framework values
  local auditPreferenceType_option_args=("Manual" "Automated") # --audit-preference values
  local mobilePlatform_option_args=("Phone" "Tablet" "Both") # --platform values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --entitlement-id)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --framework)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobileFramework_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --audit-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${auditPreferenceType_option_args[@]}" ) )
      return $?
      ;;
    --platform)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobilePlatform_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_mastscan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file --assessment-type --entitlement-id --framework --platform --timezone --start-date --notes -f --file --frequency --entitlement-frequency --remediation --remediation-preference --progress"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local mobileFramework_option_args=("iOS" "Android") # --framework values
  local mobilePlatform_option_args=("Phone" "Tablet" "Both") # --platform values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local remediationScanPreferenceType_option_args=("RemediationScanIfAvailable" "RemediationScanOnly" "NonRemediationScanOnly") # --remediation-preference values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --assessment-type)
      return
      ;;
    --entitlement-id)
      return
      ;;
    --framework)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobileFramework_option_args[@]}" ) )
      return $?
      ;;
    --platform)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobilePlatform_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --start-date)
      return
      ;;
    --notes)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --remediation|--remediation-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${remediationScanPreferenceType_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_mastscan_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Not_Started" "In_Progress" "Completed" "Canceled" "Waiting" "Scheduled" "Queued") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_fod_mast_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_mast_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_mast_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_mast_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-config` subcommand.
function _picocli_fcli_fod_mast_getconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_mast_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_mast_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_mast_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup` subcommand.
function _picocli_fcli_fod_mast_setup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --skip-if-exists"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --release --rel --assessment-type --entitlement-id --frequency --entitlement-frequency --framework --timezone --audit-preference --platform --progress"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local mobileFramework_option_args=("iOS" "Android") # --framework values
  local auditPreferenceType_option_args=("Manual" "Automated") # --audit-preference values
  local mobilePlatform_option_args=("Phone" "Tablet" "Both") # --platform values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --assessment-type)
      return
      ;;
    --entitlement-id)
      return
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --framework)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobileFramework_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --audit-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${auditPreferenceType_option_args[@]}" ) )
      return $?
      ;;
    --platform)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobilePlatform_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_mast_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file --assessment-type --entitlement-id --framework --platform --timezone --start-date --notes -f --file --frequency --entitlement-frequency --remediation --remediation-preference --progress"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local mobileFramework_option_args=("iOS" "Android") # --framework values
  local mobilePlatform_option_args=("Phone" "Tablet" "Both") # --platform values
  local entitlementFrequencyType_option_args=("SingleScan" "Subscription") # --entitlement-frequency values
  local remediationScanPreferenceType_option_args=("RemediationScanIfAvailable" "RemediationScanOnly" "NonRemediationScanOnly") # --remediation-preference values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --assessment-type)
      return
      ;;
    --entitlement-id)
      return
      ;;
    --framework)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobileFramework_option_args[@]}" ) )
      return $?
      ;;
    --platform)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${mobilePlatform_option_args[@]}" ) )
      return $?
      ;;
    --timezone)
      return
      ;;
    --start-date)
      return
      ;;
    --notes)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --frequency|--entitlement-frequency)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${entitlementFrequencyType_option_args[@]}" ) )
      return $?
      ;;
    --remediation|--remediation-preference)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${remediationScanPreferenceType_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_mast_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Not_Started" "In_Progress" "Completed" "Canceled" "Waiting" "Scheduled" "Queued") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_ossscan_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_ossscan_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_ossscan_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_ossscan_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file --type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("CycloneDX") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import-debricked` subcommand.
function _picocli_fcli_fod_ossscan_importdebricked() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file --socket-timeout --connect-timeout --debricked-user -u --debricked-password -p --debricked-access-token -t -r --repository -b --branch --type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("CycloneDX") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --debricked-user|-u)
      return
      ;;
    --debricked-password|-p)
      return
      ;;
    --debricked-access-token|-t)
      return
      ;;
    -r|--repository)
      return
      ;;
    -b|--branch)
      return
      ;;
    --type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_ossscan_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_ossscan_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_ossscan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_ossscan_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Not_Started" "In_Progress" "Completed" "Canceled" "Waiting" "Scheduled" "Queued") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-components` subcommand.
function _picocli_fcli_fod_ossscan_listcomponents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --app --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Sonatype" "CycloneDx" "Debricked") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --app)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsc` subcommand.
function _picocli_fcli_fod_ossscan_lsc() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --app --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Sonatype" "CycloneDx" "Debricked") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --app)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_oss_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-latest` subcommand.
function _picocli_fcli_fod_oss_downloadlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -f --file -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_oss_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_fod_oss_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file --type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("CycloneDX") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import-debricked` subcommand.
function _picocli_fcli_fod_oss_importdebricked() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel --progress -f --file --chunk-size -o --output --style --store --to-file --socket-timeout --connect-timeout --debricked-user -u --debricked-password -p --debricked-access-token -t -r --repository -b --branch --type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("CycloneDX") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --chunk-size)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --debricked-user|-u)
      return
      ;;
    --debricked-password|-p)
      return
      ;;
    --debricked-access-token|-t)
      return
      ;;
    -r|--repository)
      return
      ;;
    -b|--branch)
      return
      ;;
    --type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_oss_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_oss_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_fod_oss_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --validate-entitlement"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session --delim --release --rel -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_oss_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session --delim -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Not_Started" "In_Progress" "Completed" "Canceled" "Waiting" "Scheduled" "Queued") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    --delim)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-components` subcommand.
function _picocli_fcli_fod_oss_listcomponents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --app --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Sonatype" "CycloneDx" "Debricked") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --app)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsc` subcommand.
function _picocli_fcli_fod_oss_lsc() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --app --release --rel --scan-types"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanTypes_option_args=("Sonatype" "CycloneDx" "Debricked") # --scan-types values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --app)
      return
      ;;
    --release|--rel)
      return
      ;;
    --scan-types)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanTypes_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_issue_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel --filters-param --embed --include -i"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("allData" "summary" "details" "recommendations" "history" "requestResponse" "headers" "parameters" "traces") # --embed values
  local status_option_args=("visible" "fixed" "suppressed") # --include values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --filters-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${status_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_issue_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --delim --release --rel --filters-param --embed --include -i"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("allData" "summary" "details" "recommendations" "history" "requestResponse" "headers" "parameters" "traces") # --embed values
  local status_option_args=("visible" "fixed" "suppressed") # --include values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --filters-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${status_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_fod_issue_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --release --rel --user --dev-status --auditor-status --severity --comment --vuln-ids"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local developerStatus_option_args=("Open" "InRemediation" "Remediated" "WillNotFix" "ThirdPartyComponent") # --dev-status values
  local auditorStatus_option_args=("PendingReview" "RemediationRequired" "RemediationDeferred" "RiskMitigated" "RiskAccepted" "NotAnIssue") # --auditor-status values
  local severity_option_args=("Low" "Medium" "High" "Critical" "Info" "Best Practice") # --severity values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --user)
      return
      ;;
    --dev-status)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${developerStatus_option_args[@]}" ) )
      return $?
      ;;
    --auditor-status)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${auditorStatus_option_args[@]}" ) )
      return $?
      ;;
    --severity)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${severity_option_args[@]}" ) )
      return $?
      ;;
    --comment)
      return
      ;;
    --vuln-ids)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_fod_report_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_fod_report_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --filters-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --filters-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_fod_report_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_fod_report_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file --delim --release --rel --template --format --notes"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local format_option_args=("pdf" "html") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --release|--rel)
      return
      ;;
    --template)
      return
      ;;
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
    --notes)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_fod_report_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_fod_report_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_fod_report_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --fod-session -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Started" "Completed" "Failed" "Queued") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_fod_report_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-templates` subcommand.
function _picocli_fcli_fod_report_listtemplates() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --group"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local groupType_option_args=("All" "Standard" "Custom") # --group values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --group)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${groupType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lst` subcommand.
function _picocli_fcli_fod_report_lst() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query --group"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local groupType_option_args=("All" "Standard" "Custom") # --group values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --group)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${groupType_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `call` subcommand.
function _picocli_fcli_fod_rest_call() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-paging --no-transform"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --request -X --data -d -t --transform -o --output --style --store --to-file -q --query --fod-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --request|-X)
      return
      ;;
    --data|-d)
      return
      ;;
    -t|--transform)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --fod-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lookup` subcommand.
function _picocli_fcli_fod_rest_lookup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --fod-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --fod-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac
  local type_pos_param_args=("All" "AnalysisStatusTypes" "ApplicationTypes" "AssessmentTypes" "AttributeDataTypes" "AttributeTypes" "AuditActionTypes" "AuditPreferenceTypes" "AuditTemplateConditionTypes" "BusinessCriticalityTypes" "ConcurrentRequestThreadsTypes" "DastAutomatedScanPolicies" "DastAutomatedScanTypes" "DataExportTypes" "DayOfWeekTypes" "DynamicMobileScanTypeAuditTemplateFieldTypes" "DynamicScanAuthenticationTypes" "DynamicScanEnvironmentFacingTypes" "DynamicScanWebServiceTypes" "EntitlementFrequencyTypes" "GeoLocations" "LanguageLevels" "MobileScanAuditPreferenceTypes" "MobileScanEnvironmentTypes" "MobileScanExternalDeviceTypes" "MobileScanFrameworkTypes" "MobileScanPlatformTypes" "MobileScanRoleTypes" "MultiFactorAuthorizationTypes" "NotificationTriggerTypes" "OpenSourceScanTypeAuditTemplateFieldTypes" "PassFailReasonTypes" "RepeatScheduleTypes" "ReportFormats" "ReportStatusTypes" "ReportTemplateTypes" "ReportTypes" "Roles" "SDLCStatusTypes" "ScanMethodTypes" "ScanPreferenceTypes" "ScanStatusTypes" "ScanTypes" "StartScanMethodTypes" "StaticScanTypeAuditTemplateFieldTypes" "TechnologyTypes" "TimeZones" "VulnerabilitySeverityTypes") # 0-0 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "lookup" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      positionals=$( compReplyArray "${type_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan` subcommand.
function _picocli_fcli_scdast_scan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="complete delete rm download get import-findings list ls pause publish resume start wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan-policy` subcommand.
function _picocli_fcli_scdast_scanpolicy() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan-settings` subcommand.
function _picocli_fcli_scdast_scansettings() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sensor` subcommand.
function _picocli_fcli_scdast_sensor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="disable enable get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rest` subcommand.
function _picocli_fcli_scdast_rest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="call"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `complete` subcommand.
function _picocli_fcli_scdast_scan_complete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_scdast_scan_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_scdast_scan_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_scdast_scan_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file -t --type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("fpr" "logs" "results" "settings" "site-tree") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -t|--type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_scan_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import-findings` subcommand.
function _picocli_fcli_scdast_scan_importfindings() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_scan_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --server-queries"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --server-queries)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_scan_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --server-queries"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --server-queries)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pause` subcommand.
function _picocli_fcli_scdast_scan_pause() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `publish` subcommand.
function _picocli_fcli_scdast_scan_publish() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `resume` subcommand.
function _picocli_fcli_scdast_scan_resume() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_scdast_scan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --name -n -s --settings -p --policy --overrides-file --mode -m --login-macro -l"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local scanMode_option_args=("CrawlOnly" "CrawlAndAudit" "AuditOnly") # --mode values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
    -s|--settings)
      return
      ;;
    -p|--policy)
      return
      ;;
    --overrides-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --mode|-m)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanMode_option_args[@]}" ) )
      return $?
      ;;
    --login-macro|-l)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_scdast_scan_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --ssc-session -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("Queued" "Pending" "Paused" "Running" "Complete" "Interrupted" "Unknown" "ImportingScanResults" "ImportScanResultsFailed" "FailedToStart" "PausingScan" "ResumingScan" "CompletingScan" "ResumeScanQueued" "ForcedComplete" "FailedToResume" "LicenseUnavailable") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_scanpolicy_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_scanpolicy_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_scanpolicy_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_scansettings_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_scansettings_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --server-queries"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --server-queries)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_scansettings_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --server-queries"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --server-queries)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `disable` subcommand.
function _picocli_fcli_scdast_sensor_disable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `enable` subcommand.
function _picocli_fcli_scdast_sensor_enable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_scdast_sensor_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scdast_sensor_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scdast_sensor_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `call` subcommand.
function _picocli_fcli_scdast_rest_call() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-paging --no-transform"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --request -X --data -d -t --transform -o --output --style --store --to-file -q --query --ssc-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --request|-X)
      return
      ;;
    --data|-d)
      return
      ;;
    -t|--transform)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --ssc-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scan` subcommand.
function _picocli_fcli_scsast_scan() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="cancel download list ls start status wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sensor` subcommand.
function _picocli_fcli_scsast_sensor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sensor-pool` subcommand.
function _picocli_fcli_scsast_sensorpool() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pool` subcommand.
function _picocli_fcli_scsast_pool() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rest` subcommand.
function _picocli_fcli_scsast_rest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="call"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_fcli_scsast_scan_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_scsast_scan_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file --type -t"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local type_option_args=("fpr" "log" "sensor-log" "job") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --type|-t)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scsast_scan_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scsast_scan_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_fcli_scsast_scan_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-replace --diagnose"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --sensor-pool --pool --delim --publish-to --publish-as --publish-token -f --file --sensor-version -v --notify --sargs --scan-args --scan-timeout"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --sensor-pool|--pool)
      return
      ;;
    --delim)
      return
      ;;
    --publish-to)
      return
      ;;
    --publish-as)
      return
      ;;
    --publish-token)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --sensor-version|-v)
      return
      ;;
    --notify)
      return
      ;;
    --sargs|--scan-args)
      return
      ;;
    --scan-timeout)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `status` subcommand.
function _picocli_fcli_scsast_scan_status() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_scsast_scan_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --ssc-session --any-scan-state --any-publish-state --any-ssc-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local scanStates_option_args=("UNKNOWN" "PENDING" "QUEUED" "RUNNING" "CANCELING" "CANCELED" "COMPLETED" "FAILED" "FAULTED" "TIMEOUT" "NO_PUBLISH") # --any-scan-state values
  local publishStates_option_args=("UNKNOWN" "PENDING" "QUEUED" "RUNNING" "CANCELING" "CANCELED" "COMPLETED" "FAILED" "FAULTED" "TIMEOUT" "NO_PUBLISH") # --any-publish-state values
  local sscStates_option_args=("SCHED_PROCESSING" "PROCESSING" "PROCESS_COMPLETE" "ERROR_PROCESSING" "AUTH_DENIED" "REQUIRE_AUTH" "DELETING" "ERROR_DELETING" "DELETED" "PURGING" "PURGED" "ERROR_PURGING" "DISPATCH_ANALYSIS" "DISPATCH_REAUDIT" "ERROR_DISPATCH" "QUEUED_ANALYSIS" "REQUEUED_ANALYSIS" "ANALYZING" "ANALYSIS_COMPLETE" "ERROR_ANALYZING" "UNKNOWN" "AUDIT_FAILED" "PENDING" "QUEUED" "RUNNING" "CANCELING" "CANCELED" "COMPLETED" "FAILED" "FAULTED" "TIMEOUT" "NO_PUBLISH") # --any-ssc-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --any-scan-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${scanStates_option_args[@]}" ) )
      return $?
      ;;
    --any-publish-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${publishStates_option_args[@]}" ) )
      return $?
      ;;
    --any-ssc-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${sscStates_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scsast_sensor_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scsast_sensor_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scsast_sensorpool_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scsast_sensorpool_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_scsast_pool_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_scsast_pool_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `call` subcommand.
function _picocli_fcli_scsast_rest_call() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-paging --no-transform"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --request -X --data -d -t --transform -o --output --style --store --to-file -q --query --ssc-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --request|-X)
      return
      ;;
    --data|-d)
      return
      ;;
    -t|--transform)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --ssc-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_fcli_ssc_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls login logout"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `action` subcommand.
function _picocli_fcli_ssc_action() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get help import list ls reset run sign"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `access-control` subcommand.
function _picocli_fcli_ssc_accesscontrol() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-token-definitions lstd create-token list-tokens lst revoke-token update-token create-role delete-role rm-role get-role list-roles lsr get-permission list-permissions lsp create-local-user delete-user rm-user get-user list-users lsu list-appversion-users lsavu"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ac` subcommand.
function _picocli_fcli_ssc_ac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-token-definitions lstd create-token list-tokens lst revoke-token update-token create-role delete-role rm-role get-role list-roles lsr get-permission list-permissions lsp create-local-user delete-user rm-user get-user list-users lsu list-appversion-users lsavu"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `alert` subcommand.
function _picocli_fcli_ssc_alert() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get-definition list-definitions lsd list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `app` subcommand.
function _picocli_fcli_ssc_app() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="delete rm get list ls update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `appversion` subcommand.
function _picocli_fcli_ssc_appversion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create delete rm copy-state download-state get list ls purge-artifacts refresh-metrics update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `av` subcommand.
function _picocli_fcli_ssc_av() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create delete rm copy-state download-state get list ls purge-artifacts refresh-metrics update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `artifact` subcommand.
function _picocli_fcli_ssc_artifact() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="approve delete rm download get import-debricked list ls purge upload wait-for"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `attribute` subcommand.
function _picocli_fcli_ssc_attribute() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get-definition list-definitions lsd list ls update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `attr` subcommand.
function _picocli_fcli_ssc_attr() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="get-definition list-definitions lsd list ls update"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `issue` subcommand.
function _picocli_fcli_ssc_issue() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create-template delete-template rmt download-template get-template list-templates lst update-template get-filterset list-filtersets lsfs get-filter list-filters lsf get-group list-groups lsg count list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `performance-indicator` subcommand.
function _picocli_fcli_ssc_performanceindicator() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-definitions lsd get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pi` subcommand.
function _picocli_fcli_ssc_pi() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-definitions lsd get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `variable` subcommand.
function _picocli_fcli_ssc_variable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-definitions lsd get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `var` subcommand.
function _picocli_fcli_ssc_var() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-definitions lsd get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `plugin` subcommand.
function _picocli_fcli_ssc_plugin() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install uninstall enable disable get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `report` subcommand.
function _picocli_fcli_ssc_report() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create list ls get download wait-for delete rm list-parameters lsp create-template list-templates lst get-template download-template create-template-config delete-template rmt"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `system-state` subcommand.
function _picocli_fcli_ssc_systemstate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-activities lsa list-events lse list-settings lss upload-seed-bundle list-rulepacks lsr cancel-job get-job list-jobs lsj update-job wait-for-job"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `state` subcommand.
function _picocli_fcli_ssc_state() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list-activities lsa list-events lse list-settings lss upload-seed-bundle list-rulepacks lsr cancel-job get-job list-jobs lsj update-job wait-for-job"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rest` subcommand.
function _picocli_fcli_ssc_rest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="call"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_session_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_session_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_fcli_ssc_session_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --socket-timeout --connect-timeout --url --sc-sast-url --disable --client-auth-token -c --user -u --password -p --expire-in --token -t --ssc-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local disabledComponents_option_args=("sc-sast" "sc-dast") # --disable values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --sc-sast-url)
      return
      ;;
    --disable)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${disabledComponents_option_args[@]}" ) )
      return $?
      ;;
    --client-auth-token|-c)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --expire-in)
      return
      ;;
    --token|-t)
      return
      ;;
    --ssc-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `logout` subcommand.
function _picocli_fcli_ssc_session_logout() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-revoke-token"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --user -u --password -p --ssc-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    --ssc-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_action_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_fcli_ssc_action_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_fcli_ssc_action_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey --on-invalid-signature --on-unsigned --on-no-public-key --on-invalid-version -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onInvalidSignature_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-signature values
  local onUnsigned_option_args=("ignore" "warn" "fail" "prompt") # --on-unsigned values
  local onNoPublicKey_option_args=("ignore" "warn" "fail" "prompt") # --on-no-public-key values
  local onUnsupportedVersion_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-version values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
    --on-invalid-signature)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onInvalidSignature_option_args[@]}" ) )
      return $?
      ;;
    --on-unsigned)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsigned_option_args[@]}" ) )
      return $?
      ;;
    --on-no-public-key)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onNoPublicKey_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-version)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsupportedVersion_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_action_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_action_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `reset` subcommand.
function _picocli_fcli_ssc_action_reset() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_ssc_action_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --from-zip -z --pubkey action-parameters --progress --on-invalid-signature --on-unsigned --on-no-public-key --on-invalid-version --ssc-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local onInvalidSignature_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-signature values
  local onUnsigned_option_args=("ignore" "warn" "fail" "prompt") # --on-unsigned values
  local onNoPublicKey_option_args=("ignore" "warn" "fail" "prompt") # --on-no-public-key values
  local onUnsupportedVersion_option_args=("ignore" "warn" "fail" "prompt") # --on-invalid-version values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --from-zip|-z)
      return
      ;;
    --pubkey)
      return
      ;;
    action-parameters)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-signature)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onInvalidSignature_option_args[@]}" ) )
      return $?
      ;;
    --on-unsigned)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsigned_option_args[@]}" ) )
      return $?
      ;;
    --on-no-public-key)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onNoPublicKey_option_args[@]}" ) )
      return $?
      ;;
    --on-invalid-version)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnsupportedVersion_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sign` subcommand.
function _picocli_fcli_ssc_action_sign() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --in --out --info --signer --with --pubout --password -p"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --in)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --out)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --info)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --signer)
      return
      ;;
    --with)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --pubout)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --password|-p)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-token-definitions` subcommand.
function _picocli_fcli_ssc_accesscontrol_listtokendefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lstd` subcommand.
function _picocli_fcli_ssc_accesscontrol_lstd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-token` subcommand.
function _picocli_fcli_ssc_accesscontrol_createtoken() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file --expire-in --description"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --expire-in)
      return
      ;;
    --description)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-tokens` subcommand.
function _picocli_fcli_ssc_accesscontrol_listtokens() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lst` subcommand.
function _picocli_fcli_ssc_accesscontrol_lst() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `revoke-token` subcommand.
function _picocli_fcli_ssc_accesscontrol_revoketoken() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-token` subcommand.
function _picocli_fcli_ssc_accesscontrol_updatetoken() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file --expire-in --description"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --expire-in)
      return
      ;;
    --description)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-role` subcommand.
function _picocli_fcli_ssc_accesscontrol_createrole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --universal-access"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -d --description -p --permission-ids"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -d|--description)
      return
      ;;
    -p|--permission-ids)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-role` subcommand.
function _picocli_fcli_ssc_accesscontrol_deleterole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-role` subcommand.
function _picocli_fcli_ssc_accesscontrol_rmrole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-role` subcommand.
function _picocli_fcli_ssc_accesscontrol_getrole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-roles` subcommand.
function _picocli_fcli_ssc_accesscontrol_listroles() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsr` subcommand.
function _picocli_fcli_ssc_accesscontrol_lsr() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-permission` subcommand.
function _picocli_fcli_ssc_accesscontrol_getpermission() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-permissions` subcommand.
function _picocli_fcli_ssc_accesscontrol_listpermissions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --role"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --role)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_ssc_accesscontrol_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --role"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --role)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-local-user` subcommand.
function _picocli_fcli_ssc_accesscontrol_createlocaluser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --password-never-expires --pne --require-password-change --rpc --suspend"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --username --password --firstname --lastname --email --roles"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --username)
      return
      ;;
    --password)
      return
      ;;
    --firstname)
      return
      ;;
    --lastname)
      return
      ;;
    --email)
      return
      ;;
    --roles)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-user` subcommand.
function _picocli_fcli_ssc_accesscontrol_deleteuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-user` subcommand.
function _picocli_fcli_ssc_accesscontrol_rmuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-user` subcommand.
function _picocli_fcli_ssc_accesscontrol_getuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-users` subcommand.
function _picocli_fcli_ssc_accesscontrol_listusers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsu` subcommand.
function _picocli_fcli_ssc_accesscontrol_lsu() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-appversion-users` subcommand.
function _picocli_fcli_ssc_accesscontrol_listappversionusers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsavu` subcommand.
function _picocli_fcli_ssc_accesscontrol_lsavu() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-token-definitions` subcommand.
function _picocli_fcli_ssc_ac_listtokendefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lstd` subcommand.
function _picocli_fcli_ssc_ac_lstd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-token` subcommand.
function _picocli_fcli_ssc_ac_createtoken() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file --expire-in --description"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --expire-in)
      return
      ;;
    --description)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-tokens` subcommand.
function _picocli_fcli_ssc_ac_listtokens() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lst` subcommand.
function _picocli_fcli_ssc_ac_lst() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `revoke-token` subcommand.
function _picocli_fcli_ssc_ac_revoketoken() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-token` subcommand.
function _picocli_fcli_ssc_ac_updatetoken() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --socket-timeout --connect-timeout --url --user -u --password -p -o --output --style --store --to-file --expire-in --description"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --url)
      return
      ;;
    --user|-u)
      return
      ;;
    --password|-p)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --expire-in)
      return
      ;;
    --description)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-role` subcommand.
function _picocli_fcli_ssc_ac_createrole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --universal-access"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -d --description -p --permission-ids"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -d|--description)
      return
      ;;
    -p|--permission-ids)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-role` subcommand.
function _picocli_fcli_ssc_ac_deleterole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-role` subcommand.
function _picocli_fcli_ssc_ac_rmrole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-role` subcommand.
function _picocli_fcli_ssc_ac_getrole() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-roles` subcommand.
function _picocli_fcli_ssc_ac_listroles() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsr` subcommand.
function _picocli_fcli_ssc_ac_lsr() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-permission` subcommand.
function _picocli_fcli_ssc_ac_getpermission() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-permissions` subcommand.
function _picocli_fcli_ssc_ac_listpermissions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --role"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --role)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_ssc_ac_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --role"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --role)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-local-user` subcommand.
function _picocli_fcli_ssc_ac_createlocaluser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --password-never-expires --pne --require-password-change --rpc --suspend"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --username --password --firstname --lastname --email --roles"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --username)
      return
      ;;
    --password)
      return
      ;;
    --firstname)
      return
      ;;
    --lastname)
      return
      ;;
    --email)
      return
      ;;
    --roles)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-user` subcommand.
function _picocli_fcli_ssc_ac_deleteuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm-user` subcommand.
function _picocli_fcli_ssc_ac_rmuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --allow-multi-match"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-user` subcommand.
function _picocli_fcli_ssc_ac_getuser() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-users` subcommand.
function _picocli_fcli_ssc_ac_listusers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsu` subcommand.
function _picocli_fcli_ssc_ac_lsu() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-appversion-users` subcommand.
function _picocli_fcli_ssc_ac_listappversionusers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsavu` subcommand.
function _picocli_fcli_ssc_ac_lsavu() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-definition` subcommand.
function _picocli_fcli_ssc_alert_getdefinition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-definitions` subcommand.
function _picocli_fcli_ssc_alert_listdefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsd` subcommand.
function _picocli_fcli_ssc_alert_lsd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_alert_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_alert_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_app_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_app_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_app_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_app_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_app_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_app_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --name -n --description -d"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_appversion_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --refresh --active --auto-required-attrs --skip-if-exists"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --issue-template --attrs --attributes --add-users --copy-from --from --copy --refresh-timeout --description -d"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local copyOptions_option_args=("custom-tags" "bugtracker" "processing-rules" "attributes" "users" "state") # --copy values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --issue-template)
      return
      ;;
    --attrs|--attributes)
      return
      ;;
    --add-users)
      return
      ;;
    --copy-from|--from)
      return
      ;;
    --copy)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${copyOptions_option_args[@]}" ) )
      return $?
      ;;
    --refresh-timeout)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_appversion_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_appversion_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `copy-state` subcommand.
function _picocli_fcli_ssc_appversion_copystate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --refresh"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --refresh-timeout --copy-from --from --copy-to --to"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --refresh-timeout)
      return
      ;;
    --copy-from|--from)
      return
      ;;
    --copy-to|--to)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-state` subcommand.
function _picocli_fcli_ssc_appversion_downloadstate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-include-sources"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_appversion_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --embed"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_appversion_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param --embed --include -i --exclude -e"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values
  local values_option_args=("active" "inactive") # --include values
  local values_option_args=("empty" "no-assigned-issues") # --exclude values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
    --exclude|-e)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_appversion_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param --embed --include -i --exclude -e"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values
  local values_option_args=("active" "inactive") # --include values
  local values_option_args=("empty" "no-assigned-issues") # --exclude values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
    --exclude|-e)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `purge-artifacts` subcommand.
function _picocli_fcli_ssc_appversion_purgeartifacts() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim -p --older-than"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    -p|--older-than)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `refresh-metrics` subcommand.
function _picocli_fcli_ssc_appversion_refreshmetrics() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --embed"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_appversion_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --active"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --issue-template --attrs --attributes --add-users --rm-users --name -n --description -d"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --issue-template)
      return
      ;;
    --attrs|--attributes)
      return
      ;;
    --add-users)
      return
      ;;
    --rm-users)
      return
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_av_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --refresh --active --auto-required-attrs --skip-if-exists"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --issue-template --attrs --attributes --add-users --copy-from --from --copy --refresh-timeout --description -d"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local copyOptions_option_args=("custom-tags" "bugtracker" "processing-rules" "attributes" "users" "state") # --copy values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --issue-template)
      return
      ;;
    --attrs|--attributes)
      return
      ;;
    --add-users)
      return
      ;;
    --copy-from|--from)
      return
      ;;
    --copy)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${copyOptions_option_args[@]}" ) )
      return $?
      ;;
    --refresh-timeout)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_av_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_av_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `copy-state` subcommand.
function _picocli_fcli_ssc_av_copystate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --refresh"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --refresh-timeout --copy-from --from --copy-to --to"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --refresh-timeout)
      return
      ;;
    --copy-from|--from)
      return
      ;;
    --copy-to|--to)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-state` subcommand.
function _picocli_fcli_ssc_av_downloadstate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-include-sources"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_av_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --embed"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_av_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param --embed --include -i --exclude -e"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values
  local values_option_args=("active" "inactive") # --include values
  local values_option_args=("empty" "no-assigned-issues") # --exclude values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
    --exclude|-e)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_av_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param --embed --include -i --exclude -e"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values
  local values_option_args=("active" "inactive") # --include values
  local values_option_args=("empty" "no-assigned-issues") # --exclude values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
    --exclude|-e)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${values_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `purge-artifacts` subcommand.
function _picocli_fcli_ssc_av_purgeartifacts() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim -p --older-than"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    -p|--older-than)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `refresh-metrics` subcommand.
function _picocli_fcli_ssc_av_refreshmetrics() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --embed"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("attrs" "attrValuesByName" "attrValuesByGuid" "bugtracker" "customTags" "filterSets" "folders" "resultProcessingRules") # --embed values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_av_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --active"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --issue-template --attrs --attributes --add-users --rm-users --name -n --description -d"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --issue-template)
      return
      ;;
    --attrs|--attributes)
      return
      ;;
    --add-users)
      return
      ;;
    --rm-users)
      return
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `approve` subcommand.
function _picocli_fcli_ssc_artifact_approve() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -m --message"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--message)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_artifact_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_artifact_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_ssc_artifact_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-include-sources"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_artifact_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import-debricked` subcommand.
function _picocli_fcli_ssc_artifact_importdebricked() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --insecure -k"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --delim --appversion --av --progress -o --output --style --store --to-file --socket-timeout --connect-timeout --debricked-user -u --debricked-password -p --debricked-access-token -t -e --engine-type -f --save-sbom-as -r --repository -b --branch"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --socket-timeout)
      return
      ;;
    --connect-timeout)
      return
      ;;
    --debricked-user|-u)
      return
      ;;
    --debricked-password|-p)
      return
      ;;
    --debricked-access-token|-t)
      return
      ;;
    -e|--engine-type)
      return
      ;;
    -f|--save-sbom-as)
      return
      ;;
    -r|--repository)
      return
      ;;
    -b|--branch)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_artifact_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_artifact_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `purge` subcommand.
function _picocli_fcli_ssc_artifact_purge() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload` subcommand.
function _picocli_fcli_ssc_artifact_upload() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session --delim --appversion --av --progress -o --output --style --store --to-file -f --file -e --engine-type"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -e|--engine-type)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_ssc_artifact_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --ssc-session -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("SCHED_PROCESSING" "PROCESSING" "PROCESS_COMPLETE" "ERROR_PROCESSING" "AUTH_DENIED" "REQUIRE_AUTH" "DELETING" "ERROR_DELETING" "DELETED" "PURGING" "PURGED" "ERROR_PURGING" "DISPATCH_ANALYSIS" "DISPATCH_REAUDIT" "ERROR_DISPATCH" "QUEUED_ANALYSIS" "REQUEUED_ANALYSIS" "ANALYZING" "ANALYSIS_COMPLETE" "ERROR_ANALYZING" "UNKNOWN" "AUDIT_FAILED") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-definition` subcommand.
function _picocli_fcli_ssc_attribute_getdefinition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-definitions` subcommand.
function _picocli_fcli_ssc_attribute_listdefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsd` subcommand.
function _picocli_fcli_ssc_attribute_lsd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_attribute_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_attribute_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_attribute_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --attrs --attributes --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-definition` subcommand.
function _picocli_fcli_ssc_attr_getdefinition() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-definitions` subcommand.
function _picocli_fcli_ssc_attr_listdefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsd` subcommand.
function _picocli_fcli_ssc_attr_lsd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_attr_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_attr_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_ssc_attr_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --attrs --attributes --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --attrs|--attributes)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-template` subcommand.
function _picocli_fcli_ssc_issue_createtemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --set-as-default"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --name -n -f --file --description -d"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-template` subcommand.
function _picocli_fcli_ssc_issue_deletetemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rmt` subcommand.
function _picocli_fcli_ssc_issue_rmt() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-template` subcommand.
function _picocli_fcli_ssc_issue_downloadtemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-template` subcommand.
function _picocli_fcli_ssc_issue_gettemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-templates` subcommand.
function _picocli_fcli_ssc_issue_listtemplates() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lst` subcommand.
function _picocli_fcli_ssc_issue_lst() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-template` subcommand.
function _picocli_fcli_ssc_issue_updatetemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --set-as-default"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --name -n --description -d"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name|-n)
      return
      ;;
    --description|-d)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-filterset` subcommand.
function _picocli_fcli_ssc_issue_getfilterset() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-filtersets` subcommand.
function _picocli_fcli_ssc_issue_listfiltersets() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsfs` subcommand.
function _picocli_fcli_ssc_issue_lsfs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-filter` subcommand.
function _picocli_fcli_ssc_issue_getfilter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-filters` subcommand.
function _picocli_fcli_ssc_issue_listfilters() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsf` subcommand.
function _picocli_fcli_ssc_issue_lsf() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-group` subcommand.
function _picocli_fcli_ssc_issue_getgroup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-groups` subcommand.
function _picocli_fcli_ssc_issue_listgroups() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsg` subcommand.
function _picocli_fcli_ssc_issue_lsg() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `count` subcommand.
function _picocli_fcli_ssc_issue_count() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av --by --filterset --fs --filter"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
    --by)
      return
      ;;
    --filterset|--fs)
      return
      ;;
    --filter)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_issue_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av --filterset --fs --q-param --embed --filter --include -i"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("details" "comments" "auditHistory") # --embed values
  local status_option_args=("visible" "hidden" "removed" "suppressed") # --include values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
    --filterset|--fs)
      return
      ;;
    --q-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --filter)
      return
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${status_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_issue_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av --filterset --fs --q-param --embed --filter --include -i"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local embedSuppliers_option_args=("details" "comments" "auditHistory") # --embed values
  local status_option_args=("visible" "hidden" "removed" "suppressed") # --include values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
    --filterset|--fs)
      return
      ;;
    --q-param)
      return
      ;;
    --embed)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${embedSuppliers_option_args[@]}" ) )
      return $?
      ;;
    --filter)
      return
      ;;
    --include|-i)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${status_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-definitions` subcommand.
function _picocli_fcli_ssc_performanceindicator_listdefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsd` subcommand.
function _picocli_fcli_ssc_performanceindicator_lsd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_performanceindicator_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_performanceindicator_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_performanceindicator_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-definitions` subcommand.
function _picocli_fcli_ssc_pi_listdefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsd` subcommand.
function _picocli_fcli_ssc_pi_lsd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_pi_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_pi_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_pi_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-definitions` subcommand.
function _picocli_fcli_ssc_variable_listdefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsd` subcommand.
function _picocli_fcli_ssc_variable_lsd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_variable_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_variable_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_variable_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-definitions` subcommand.
function _picocli_fcli_ssc_var_listdefinitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsd` subcommand.
function _picocli_fcli_ssc_var_lsd() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_var_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_var_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_var_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --delim --appversion --av"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --delim)
      return
      ;;
    --appversion|--av)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_ssc_plugin_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-auto-enable"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_ssc_plugin_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-auto-disable"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `enable` subcommand.
function _picocli_fcli_ssc_plugin_enable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `disable` subcommand.
function _picocli_fcli_ssc_plugin_disable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_plugin_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_plugin_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_plugin_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_ssc_report_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --template --name -n --notes --format -f --parameters -p --delim"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local format_option_args=("xls" "doc" "pdf") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --template)
      return
      ;;
    --name|-n)
      return
      ;;
    --notes)
      return
      ;;
    --format|-f)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
    --parameters|-p)
      return
      ;;
    --delim)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_ssc_report_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_ssc_report_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_ssc_report_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download` subcommand.
function _picocli_fcli_ssc_report_download() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for` subcommand.
function _picocli_fcli_ssc_report_waitfor() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --ssc-session -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("SCHED_PROCESSING" "PROCESSING" "PROCESS_COMPLETE" "ERROR_PROCESSING") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_ssc_report_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_ssc_report_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-parameters` subcommand.
function _picocli_fcli_ssc_report_listparameters() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --template"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --template)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_ssc_report_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --template"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --template)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-template` subcommand.
function _picocli_fcli_ssc_report_createtemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -t --template -c --config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -t|--template)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-templates` subcommand.
function _picocli_fcli_ssc_report_listtemplates() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lst` subcommand.
function _picocli_fcli_ssc_report_lst() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-template` subcommand.
function _picocli_fcli_ssc_report_gettemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-template` subcommand.
function _picocli_fcli_ssc_report_downloadtemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-template-config` subcommand.
function _picocli_fcli_ssc_report_createtemplateconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -c --config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete-template` subcommand.
function _picocli_fcli_ssc_report_deletetemplate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rmt` subcommand.
function _picocli_fcli_ssc_report_rmt() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-activities` subcommand.
function _picocli_fcli_ssc_systemstate_listactivities() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsa` subcommand.
function _picocli_fcli_ssc_systemstate_lsa() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-events` subcommand.
function _picocli_fcli_ssc_systemstate_listevents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lse` subcommand.
function _picocli_fcli_ssc_systemstate_lse() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-settings` subcommand.
function _picocli_fcli_ssc_systemstate_listsettings() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lss` subcommand.
function _picocli_fcli_ssc_systemstate_lss() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload-seed-bundle` subcommand.
function _picocli_fcli_ssc_systemstate_uploadseedbundle() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-rulepacks` subcommand.
function _picocli_fcli_ssc_systemstate_listrulepacks() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsr` subcommand.
function _picocli_fcli_ssc_systemstate_lsr() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel-job` subcommand.
function _picocli_fcli_ssc_systemstate_canceljob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-job` subcommand.
function _picocli_fcli_ssc_systemstate_getjob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-jobs` subcommand.
function _picocli_fcli_ssc_systemstate_listjobs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsj` subcommand.
function _picocli_fcli_ssc_systemstate_lsj() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-job` subcommand.
function _picocli_fcli_ssc_systemstate_updatejob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --priority"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --priority)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for-job` subcommand.
function _picocli_fcli_ssc_systemstate_waitforjob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --ssc-session -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("PREPARED" "FINISHED" "RUNNING" "DEFERRED" "FAILED" "CANCELLED" "CANCELLING") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-activities` subcommand.
function _picocli_fcli_ssc_state_listactivities() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsa` subcommand.
function _picocli_fcli_ssc_state_lsa() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-events` subcommand.
function _picocli_fcli_ssc_state_listevents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lse` subcommand.
function _picocli_fcli_ssc_state_lse() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-settings` subcommand.
function _picocli_fcli_ssc_state_listsettings() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lss` subcommand.
function _picocli_fcli_ssc_state_lss() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `upload-seed-bundle` subcommand.
function _picocli_fcli_ssc_state_uploadseedbundle() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -f --file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -f|--file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-rulepacks` subcommand.
function _picocli_fcli_ssc_state_listrulepacks() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsr` subcommand.
function _picocli_fcli_ssc_state_lsr() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel-job` subcommand.
function _picocli_fcli_ssc_state_canceljob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-job` subcommand.
function _picocli_fcli_ssc_state_getjob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-jobs` subcommand.
function _picocli_fcli_ssc_state_listjobs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsj` subcommand.
function _picocli_fcli_ssc_state_lsj() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file -q --query --q-param"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --q-param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update-job` subcommand.
function _picocli_fcli_ssc_state_updatejob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --ssc-session -o --output --style --store --to-file --priority"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --priority)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wait-for-job` subcommand.
function _picocli_fcli_ssc_state_waitforjob() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file --on-unknown-state-requested --on-failure-state --on-unknown-state --on-timeout --interval -i --timeout -t --until -u --while -w --progress --ssc-session -s --any-state"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values
  local onUnknownStateRequested_option_args=("ignore" "fail") # --on-unknown-state-requested values
  local onFailureState_option_args=("wait" "terminate" "fail") # --on-failure-state values
  local onUnknownState_option_args=("wait" "terminate" "fail") # --on-unknown-state values
  local onTimeout_option_args=("terminate" "fail") # --on-timeout values
  local anymatchallmatch_option_args=("any-match" "all-match") # --until values
  local anymatchallmatch_option_args=("any-match" "all-match") # --while values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local states_option_args=("PREPARED" "FINISHED" "RUNNING" "DEFERRED" "FAILED" "CANCELLED" "CANCELLING") # --any-state values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --on-unknown-state-requested)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownStateRequested_option_args[@]}" ) )
      return $?
      ;;
    --on-failure-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onFailureState_option_args[@]}" ) )
      return $?
      ;;
    --on-unknown-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onUnknownState_option_args[@]}" ) )
      return $?
      ;;
    --on-timeout)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onTimeout_option_args[@]}" ) )
      return $?
      ;;
    --interval|-i)
      return
      ;;
    --timeout|-t)
      return
      ;;
    --until|-u)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --while|-w)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${anymatchallmatch_option_args[@]}" ) )
      return $?
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --ssc-session)
      return
      ;;
    -s|--any-state)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${states_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `call` subcommand.
function _picocli_fcli_ssc_rest_call() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-paging --no-transform"
  local arg_opts="--env-prefix --log-file --log-level --log-mask --request -X --data -d -t --transform -o --output --style --store --to-file -q --query --ssc-session"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    --request|-X)
      return
      ;;
    --data|-d)
      return
      ;;
    -t|--transform)
      return
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    --ssc-session)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `bugtracker-utility` subcommand.
function _picocli_fcli_tool_bugtrackerutility() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fbtu` subcommand.
function _picocli_fcli_tool_fbtu() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `debricked-cli` subcommand.
function _picocli_fcli_tool_debrickedcli() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `dcli` subcommand.
function _picocli_fcli_tool_dcli() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fcli` subcommand.
function _picocli_fcli_tool_fcli() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fod-uploader` subcommand.
function _picocli_fcli_tool_foduploader() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fodupload` subcommand.
function _picocli_fcli_tool_fodupload() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sc-client` subcommand.
function _picocli_fcli_tool_scclient() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scancentral-client` subcommand.
function _picocli_fcli_tool_scancentralclient() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `vuln-exporter` subcommand.
function _picocli_fcli_tool_vulnexporter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fve` subcommand.
function _picocli_fcli_tool_fve() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="install list ls list-platforms lsp run uninstall"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `definitions` subcommand.
function _picocli_fcli_tool_definitions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="list ls update reset"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_bugtrackerutility_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_bugtrackerutility_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_bugtrackerutility_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_bugtrackerutility_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_bugtrackerutility_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_bugtrackerutility_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_bugtrackerutility_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_fbtu_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_fbtu_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_fbtu_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_fbtu_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_fbtu_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_fbtu_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_fbtu_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_debrickedcli_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_debrickedcli_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_debrickedcli_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_debrickedcli_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_debrickedcli_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_debrickedcli_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_debrickedcli_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_dcli_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_dcli_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_dcli_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_dcli_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_dcli_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_dcli_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_dcli_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_fcli_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_fcli_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_fcli_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_fcli_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_fcli_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_fcli_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_fcli_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_foduploader_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_foduploader_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_foduploader_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_foduploader_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_foduploader_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_foduploader_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_foduploader_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_fodupload_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_fodupload_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_fodupload_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_fodupload_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_fodupload_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_fodupload_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_fodupload_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_scclient_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm --with-jre"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file -t --client-auth-token --jre-platform"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -t|--client-auth-token)
      return
      ;;
    --jre-platform)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_scclient_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_scclient_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_scclient_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_scclient_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_scclient_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell --logdir"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
    --logdir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_scclient_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_scancentralclient_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm --with-jre"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file -t --client-auth-token --jre-platform"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -t|--client-auth-token)
      return
      ;;
    --jre-platform)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_scancentralclient_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_scancentralclient_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_scancentralclient_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_scancentralclient_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_scancentralclient_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell --logdir"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
    --logdir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_scancentralclient_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_vulnexporter_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_vulnexporter_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_vulnexporter_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_vulnexporter_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_vulnexporter_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_vulnexporter_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_vulnexporter_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_fcli_tool_fve_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug --no-global-bin -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --install-dir -b --base-dir -p --platform --on-digest-mismatch -u --uninstall --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local onDigestMismatch_option_args=("fail" "warn") # --on-digest-mismatch values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--install-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -b|--base-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -p|--platform)
      return
      ;;
    --on-digest-mismatch)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${onDigestMismatch_option_args[@]}" ) )
      return $?
      ;;
    -u|--uninstall)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_fve_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_fve_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-platforms` subcommand.
function _picocli_fcli_tool_fve_listplatforms() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lsp` subcommand.
function _picocli_fcli_tool_fve_lsp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query -v --version"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
    -v|--version)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_fcli_tool_fve_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --version -d --workdir --use-shell"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local useShell_option_args=("no" "yes" "auto") # --use-shell values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--version)
      return
      ;;
    -d|--workdir)
      return
      ;;
    --use-shell)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${useShell_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_fcli_tool_fve_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -v --versions --progress -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -v|--versions)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_tool_definitions_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_tool_definitions_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_fcli_tool_definitions_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -s --source"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--source)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `reset` subcommand.
function _picocli_fcli_tool_definitions_reset() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `msp-report` subcommand.
function _picocli_fcli_license_mspreport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create create-config"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ncd-report` subcommand.
function _picocli_fcli_license_ncdreport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="create create-config"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_license_mspreport_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -z --report-zip -d --report-dir --progress -o --output --style --store --to-file -c --config -s --start-date -e --end-date"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -z|--report-zip)
      return
      ;;
    -d|--report-dir)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--start-date)
      return
      ;;
    -e|--end-date)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-config` subcommand.
function _picocli_fcli_license_mspreport_createconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -c --config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_fcli_license_ncdreport_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -z --report-zip -d --report-dir --progress -o --output --style --store --to-file -c --config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local type_option_args=("auto" "none" "simple" "stderr" "single-line" "ansi") # --progress values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -z|--report-zip)
      return
      ;;
    -d|--report-dir)
      return
      ;;
    --progress)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-config` subcommand.
function _picocli_fcli_license_ncdreport_createconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -c --config"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -c|--config)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `all-commands` subcommand.
function _picocli_fcli_util_allcommands() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="usage list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `auto-complete` subcommand.
function _picocli_fcli_util_autocomplete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="generate"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `crypto` subcommand.
function _picocli_fcli_util_crypto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="encrypt decrypt"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `state` subcommand.
function _picocli_fcli_util_state() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="clear"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `variable` subcommand.
function _picocli_fcli_util_variable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="contents clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `var` subcommand.
function _picocli_fcli_util_var() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local extraCompGenOpts=()  local commands="contents clear delete rm get list ls"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `usage` subcommand.
function _picocli_fcli_util_allcommands_usage() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_util_allcommands_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_util_allcommands_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate` subcommand.
function _picocli_fcli_util_autocomplete_generate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `encrypt` subcommand.
function _picocli_fcli_util_crypto_encrypt() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `decrypt` subcommand.
function _picocli_fcli_util_crypto_decrypt() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_util_state_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug -y --confirm"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contents` subcommand.
function _picocli_fcli_util_variable_contents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_util_variable_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_util_variable_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_util_variable_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_util_variable_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_util_variable_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_util_variable_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contents` subcommand.
function _picocli_fcli_util_var_contents() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_fcli_util_var_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_fcli_util_var_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rm` subcommand.
function _picocli_fcli_util_var_rm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_fcli_util_var_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_fcli_util_var_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ls` subcommand.
function _picocli_fcli_util_var_ls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local extraCompGenOpts=()  local commands=""
  local flag_opts="-h --help --debug"
  local arg_opts="--env-prefix --log-file --log-level --log-mask -o --output --style --store --to-file -q --query"
  local logLevel_option_args=("TRACE" "DEBUG" "INFO" "WARN" "ERROR" "NONE") # --log-level values
  local logMaskLevel_option_args=("high" "medium" "low" "none") # --log-mask values
  local typeargs_option_args=("csv" "table" "expr" "json" "xml" "yaml") # --output values
  local outputStyleElements_option_args=("header" "no-header" "pretty" "no-pretty" "flat" "no-flat" "array" "single" "border" "no-border" "md-border") # --style values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --env-prefix)
      return
      ;;
    --log-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --log-level)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logLevel_option_args[@]}" ) )
      return $?
      ;;
    --log-mask)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${logMaskLevel_option_args[@]}" ) )
      return $?
      ;;
    -o|--output)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${typeargs_option_args[@]}" ) )
      return $?
      ;;
    --style)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${outputStyleElements_option_args[@]}" ) )
      return $?
      ;;
    --store)
      return
      ;;
    --to-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -q|--query)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen ${extraCompGenOpts[@]} -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `fcli`, `fcli.sh`, and `fcli.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_fcli` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_fcli -o default fcli fcli.sh fcli.bash
